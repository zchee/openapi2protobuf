syntax = "proto3";

package go.lsp.dev.general;

import "google/protobuf/any.proto";

option go_package = "go.lsp.dev/general";

message LSPAny {
  google.protobuf.Any any = 1;
}

message LSPArray {
  repeated google.protobuf.Any array = 1;
}

message LSPObject {
  option map_entry = true;

  map<string, google.protobuf.Any> object = 1;
}

message CallHierarchyClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
  // return value for the corresponding server capability as well.
  bool dynamic_registration = 1;
}

// ClientCapabilities defines the capabilities provided by the client.
message ClientCapabilities {
  WorkspaceClientCapabilities workspace = 1;

  TextDocumentClientCapabilities text_document = 2;

  WindowClientCapabilities window = 3;

  GeneralClientCapabilities general = 4;
}

// CodeActionClientCapabilities the Client Capabilities of a [CodeActionRequest](#CodeActionRequest).
message CodeActionClientCapabilities {
  // DynamicRegistration whether code action supports dynamic registration.
  bool dynamic_registration = 1;

  // IsPreferredSupport whether code action supports the `isPreferred` property.
  bool is_preferred_support = 2;

  // DisabledSupport whether code action supports the `disabled` property.
  bool disabled_support = 3;

  // DataSupport whether code action supports the `data` property which is
  // preserved between a `textDocument/codeAction` and a
  // `codeAction/resolve` request.
  bool data_support = 4;

  // HonorsChangeAnnotations whether th client honors the change annotations in
  // text edits and resource operations returned via the
  // `CodeAction#edit` property by for example presenting
  // the workspace edit in the user interface and asking
  // for confirmation.
  bool honors_change_annotations = 5;
}

// CodeLensClientCapabilities the client capabilities  of a [CodeLensRequest](#CodeLensRequest).
message CodeLensClientCapabilities {
  // DynamicRegistration whether code lens supports dynamic registration.
  bool dynamic_registration = 1;
}

message CodeLensWorkspaceClientCapabilities {
  // RefreshSupport whether the client implementation supports a refresh request sent from the
  // server to the client.
  //
  // Note that this event is global and will force the client to refresh all
  // code lenses currently shown. It should be used with absolute care and is
  // useful for situation where a server for example detect a project wide
  // change that requires such a calculation.
  bool refresh_support = 1;
}

// CompletionClientCapabilities completion client capabilities.
message CompletionClientCapabilities {
  // DynamicRegistration whether completion supports dynamic registration.
  bool dynamic_registration = 1;

  InsertTextMode insert_text_mode = 2;

  // ContextSupport the client supports to send additional context information for a
  // `textDocument/completion` request.
  bool context_support = 3;
}

message DeclarationClientCapabilities {
  // DynamicRegistration whether declaration supports dynamic registration. If this is set to `true`
  // the client supports the new `DeclarationRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // LinkSupport the client supports additional metadata in the form of declaration links.
  bool link_support = 2;
}

// DefinitionClientCapabilities client Capabilities for a [DefinitionRequest](#DefinitionRequest).
message DefinitionClientCapabilities {
  // DynamicRegistration whether definition supports dynamic registration.
  bool dynamic_registration = 1;

  // LinkSupport the client supports additional metadata in the form of definition links.
  bool link_support = 2;
}

message DidChangeConfigurationClientCapabilities {
  // DynamicRegistration did change configuration notification supports dynamic registration.
  bool dynamic_registration = 1;
}

message DidChangeWatchedFilesClientCapabilities {
  // DynamicRegistration did change watched files notification supports dynamic registration. Please note
  // that the current protocol doesn't support static configuration for file changes
  // from the server side.
  bool dynamic_registration = 1;

  // RelativePatternSupport whether the client has support for {@link RelativePatternrelative pattern}
  // or not.
  bool relative_pattern_support = 2;
}

message DocumentColorClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `DocumentColorRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;
}

// DocumentFormattingClientCapabilities client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest).
message DocumentFormattingClientCapabilities {
  // DynamicRegistration whether formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentHighlightClientCapabilities client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest).
message DocumentHighlightClientCapabilities {
  // DynamicRegistration whether document highlight supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentLinkClientCapabilities the client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest).
message DocumentLinkClientCapabilities {
  // DynamicRegistration whether document link supports dynamic registration.
  bool dynamic_registration = 1;

  // TooltipSupport whether the client support the `tooltip` property on `DocumentLink`.
  bool tooltip_support = 2;
}

// DocumentOnTypeFormattingClientCapabilities client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
message DocumentOnTypeFormattingClientCapabilities {
  // DynamicRegistration whether on type formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentRangeFormattingClientCapabilities client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
message DocumentRangeFormattingClientCapabilities {
  // DynamicRegistration whether range formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentSymbolClientCapabilities client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest).
message DocumentSymbolClientCapabilities {
  // DynamicRegistration whether document symbol supports dynamic registration.
  bool dynamic_registration = 1;

  // HierarchicalDocumentSymbolSupport the client support hierarchical document symbols.
  bool hierarchical_document_symbol_support = 2;

  // LabelSupport the client supports an additional label presented in the UI when
  // registering a document symbol provider.
  bool label_support = 3;
}

// ExecuteCommandClientCapabilities the client capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).
message ExecuteCommandClientCapabilities {
  // DynamicRegistration execute command supports dynamic registration.
  bool dynamic_registration = 1;
}

message FailureHandlingKind {
  enum FailureHandlingKind {
    FailureHandlingKind_Abort = 0;

    FailureHandlingKind_TextOnlyTransactional = 1;

    FailureHandlingKind_Transactional = 2;

    FailureHandlingKind_Undo = 3;
  }
}

// FileOperationClientCapabilities capabilities relating to events from file operations by the user in the client.
//
// These events do not come from the file system, they come from user operations
// like renaming a file in the UI.
message FileOperationClientCapabilities {
  // DynamicRegistration whether the client supports dynamic registration for file requests/notifications.
  bool dynamic_registration = 1;

  // DidCreate the client has support for sending didCreateFiles notifications.
  bool did_create = 2;

  // WillCreate the client has support for willCreateFiles requests.
  bool will_create = 3;

  // DidRename the client has support for sending didRenameFiles notifications.
  bool did_rename = 4;

  // WillRename the client has support for willRenameFiles requests.
  bool will_rename = 5;

  // DidDelete the client has support for sending didDeleteFiles notifications.
  bool did_delete = 6;

  // WillDelete the client has support for willDeleteFiles requests.
  bool will_delete = 7;
}

message FoldingRangeClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration for folding range
  // providers. If this is set to `true` the client supports the new
  // `FoldingRangeRegistrationOptions` return value for the corresponding
  // server capability as well.
  bool dynamic_registration = 1;

  Uinteger range_limit = 2;

  // LineFoldingOnly if set, the client signals that it only supports folding complete lines.
  // If set, client will ignore specified `startCharacter` and `endCharacter`
  // properties in a FoldingRange.
  bool line_folding_only = 3;
}

// GeneralClientCapabilities general client capabilities.
message GeneralClientCapabilities {
  RegularExpressionsClientCapabilities regular_expressions = 1;

  MarkdownClientCapabilities markdown = 2;

  // PositionEncodings the position encodings supported by the client. Client and server
  // have to agree on the same position encoding to ensure that offsets
  // (e.g. character position in a line) are interpreted the same on both
  // side.
  //
  // To keep the protocol backwards compatible the following applies: if
  // the value 'utf-16' is missing from the array of position encodings
  // servers can assume that the client supports UTF-16. UTF-16 is
  // therefore a mandatory encoding.
  //
  // If omitted it defaults to ['utf-16'].
  //
  // Implementation considerations: since the conversion from one encoding
  // into another requires the content of the file / line the conversion
  // is best done where the file is read which is usually on the server
  // side.
  repeated PositionEncodings position_encodings = 3;

  message PositionEncodings {
    PositionEncodings position_encodings = 1;

    message PositionEncodings {
      string position_encodings = 1;
    }
  }
}

message HoverClientCapabilities {
  // DynamicRegistration whether hover supports dynamic registration.
  bool dynamic_registration = 1;

  // ContentFormat client supports the follow content formats for the content
  // property. The order describes the preferred format of the client.
  repeated ContentFormat content_format = 2;

  message ContentFormat {
    ContentFormat content_format = 1;

    message ContentFormat {
      enum ContentFormat {
        ContentFormat_Markdown = 0;

        ContentFormat_Plaintext = 1;
      }
    }
  }
}

message ImplementationClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `ImplementationRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // LinkSupport the client supports additional metadata in the form of definition links.
  bool link_support = 2;
}

// InitializeParams the initialize parameters.
message InitializeParams {
  // ProcessId the process Id of the parent process that started
  // the server.
  int32 process_id = 1;

  // Locale the locale the client is currently showing the user interface
  // in. This must not necessarily be the locale of the operating
  // system.
  //
  // Uses IETF language tags as the value's syntax
  // (See https://en.wikipedia.org/wiki/IETF_language_tag).
  string locale = 2;

  // RootPath the rootPath of the workspace. Is null
  // if no folder is open.
  string root_path = 3;

  // RootUri the rootUri of the workspace. Is null if no
  // folder is open. If both `rootPath` and `rootUri` are set
  // `rootUri` wins.
  string root_uri = 4;

  ClientCapabilities capabilities = 5;

  // Trace the initial trace setting. If omitted trace is disabled ('off').
  Trace trace = 6;

  message Trace {
    enum Trace {
      Trace_Off = 0;

      Trace_Compact = 1;

      Trace_Messages = 2;

      Trace_Verbose = 3;
    }
  }
}

// InsertTextMode how whitespace and indentation is handled during completion
// item insertion.
message InsertTextMode {
  enum InsertTextMode {
    InsertTextMode_1 = 0;

    InsertTextMode_2 = 1;
  }
}

// LinkedEditingRangeClientCapabilities client capabilities for the linked editing range request.
message LinkedEditingRangeClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
  // return value for the corresponding server capability as well.
  bool dynamic_registration = 1;
}

// MarkdownClientCapabilities client capabilities specific to the used markdown parser.
message MarkdownClientCapabilities {
  // Parser the name of the parser.
  string parser = 1;

  // Version the version of the parser.
  string version = 2;

  // AllowedTags a list of HTML tags that the client allows / supports in
  // Markdown.
  repeated AllowedTags allowed_tags = 3;

  message AllowedTags {
    AllowedTags allowed_tags = 1;

    message AllowedTags {
      string allowed_tags = 1;
    }
  }
}

// MonikerClientCapabilities client capabilities specific to the moniker request.
message MonikerClientCapabilities {
  // DynamicRegistration whether moniker supports dynamic registration. If this is set to `true`
  // the client supports the new `MonikerRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;
}

message PrepareSupportDefaultBehavior {
  enum PrepareSupportDefaultBehavior {
    PrepareSupportDefaultBehavior_1 = 0;
  }
}

// PublishDiagnosticsClientCapabilities the publish diagnostic client capabilities.
message PublishDiagnosticsClientCapabilities {
  // RelatedInformation whether the clients accepts diagnostics with related information.
  bool related_information = 1;

  // VersionSupport whether the client interprets the version property of the
  // `textDocument/publishDiagnostics` notification`s parameter.
  bool version_support = 2;

  // CodeDescriptionSupport client supports a codeDescription property.
  bool code_description_support = 3;

  // DataSupport whether code action supports the `data` property which is
  // preserved between a `textDocument/publishDiagnostics` and
  // `textDocument/codeAction` request.
  bool data_support = 4;
}

// ReferenceClientCapabilities client Capabilities for a [ReferencesRequest](#ReferencesRequest).
message ReferenceClientCapabilities {
  // DynamicRegistration whether references supports dynamic registration.
  bool dynamic_registration = 1;
}

// RegularExpressionsClientCapabilities client capabilities specific to regular expressions.
message RegularExpressionsClientCapabilities {
  // Engine the engine's name.
  string engine = 1;

  // Version the engine's version.
  string version = 2;
}

message RenameClientCapabilities {
  // DynamicRegistration whether rename supports dynamic registration.
  bool dynamic_registration = 1;

  // PrepareSupport client supports testing for validity of rename operations
  // before execution.
  bool prepare_support = 2;

  PrepareSupportDefaultBehavior prepare_support_default_behavior = 3;

  // HonorsChangeAnnotations whether th client honors the change annotations in
  // text edits and resource operations returned via the
  // rename request's workspace edit by for example presenting
  // the workspace edit in the user interface and asking
  // for confirmation.
  bool honors_change_annotations = 4;
}

message SelectionRangeClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration for selection range providers. If this is set to `true`
  // the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server
  // capability as well.
  bool dynamic_registration = 1;
}

message SemanticTokensClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
  // return value for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // TokenTypes the token types that the client supports.
  repeated TokenTypes token_types = 2;

  // TokenModifiers the token modifiers that the client supports.
  repeated TokenModifiers token_modifiers = 3;

  // Formats the token formats the clients supports.
  repeated Formats formats = 4;

  // OverlappingTokenSupport whether the client supports tokens that can overlap each other.
  bool overlapping_token_support = 5;

  // MultilineTokenSupport whether the client supports tokens that can span multiple lines.
  bool multiline_token_support = 6;

  // ServerCancelSupport whether the client allows the server to actively cancel a
  // semantic token request, e.g. supports returning
  // LSPErrorCodes.ServerCancelled. If a server does the client
  // needs to retrigger the request.
  bool server_cancel_support = 7;

  // AugmentsSyntaxTokens whether the client uses semantic tokens to augment existing
  // syntax tokens. If set to `true` client side created syntax
  // tokens and semantic tokens are both used for colorization. If
  // set to `false` the client only uses the returned semantic tokens
  // for colorization.
  //
  // If the value is `undefined` then the client behavior is not
  // specified.
  bool augments_syntax_tokens = 8;

  message TokenModifiers {
    TokenModifiers token_modifiers = 1;

    message TokenModifiers {
      string token_modifiers = 1;
    }
  }

  message Formats {
    Formats formats = 1;

    message Formats {
      enum Formats {
        Formats_Relative = 0;
      }
    }
  }

  message TokenTypes {
    TokenTypes token_types = 1;

    message TokenTypes {
      string token_types = 1;
    }
  }
}

message SemanticTokensWorkspaceClientCapabilities {
  // RefreshSupport whether the client implementation supports a refresh request sent from
  // the server to the client.
  //
  // Note that this event is global and will force the client to refresh all
  // semantic tokens currently shown. It should be used with absolute care
  // and is useful for situation where a server for example detects a project
  // wide change that requires such a calculation.
  bool refresh_support = 1;
}

// ShowDocumentClientCapabilities client capabilities for the show document request.
message ShowDocumentClientCapabilities {
  // Support the client has support for the show document
  // request.
  bool support = 1;
}

// SignatureHelpClientCapabilities client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).
message SignatureHelpClientCapabilities {
  // DynamicRegistration whether signature help supports dynamic registration.
  bool dynamic_registration = 1;

  // ContextSupport the client supports to send additional context information for a
  // `textDocument/signatureHelp` request. A client that opts into
  // contextSupport will also support the `retriggerCharacters` on
  // `SignatureHelpOptions`.
  bool context_support = 2;
}

// TextDocumentClientCapabilities text document specific client capabilities.
message TextDocumentClientCapabilities {
  TextDocumentSyncClientCapabilities synchronization = 1;

  CompletionClientCapabilities completion = 2;

  HoverClientCapabilities hover = 3;

  SignatureHelpClientCapabilities signature_help = 4;

  DeclarationClientCapabilities declaration = 5;

  DefinitionClientCapabilities definition = 6;

  TypeDefinitionClientCapabilities type_definition = 7;

  ImplementationClientCapabilities implementation = 8;

  ReferenceClientCapabilities references = 9;

  DocumentHighlightClientCapabilities document_highlight = 10;

  DocumentSymbolClientCapabilities document_symbol = 11;

  CodeActionClientCapabilities code_action = 12;

  CodeLensClientCapabilities code_lens = 13;

  DocumentLinkClientCapabilities document_link = 14;

  DocumentColorClientCapabilities color_provider = 15;

  DocumentFormattingClientCapabilities formatting = 16;

  DocumentRangeFormattingClientCapabilities range_formatting = 17;

  DocumentOnTypeFormattingClientCapabilities on_type_formatting = 18;

  RenameClientCapabilities rename = 19;

  FoldingRangeClientCapabilities folding_range = 20;

  SelectionRangeClientCapabilities selection_range = 21;

  PublishDiagnosticsClientCapabilities publish_diagnostics = 22;

  CallHierarchyClientCapabilities call_hierarchy = 23;

  SemanticTokensClientCapabilities semantic_tokens = 24;

  LinkedEditingRangeClientCapabilities linked_editing_range = 25;

  MonikerClientCapabilities moniker = 26;
}

message TextDocumentSyncClientCapabilities {
  // DynamicRegistration whether text document synchronization supports dynamic registration.
  bool dynamic_registration = 1;

  // WillSave the client supports sending will save notifications.
  bool will_save = 2;

  // WillSaveWaitUntil the client supports sending a will save request and
  // waits for a response providing text edits which will
  // be applied to the document before it is saved.
  bool will_save_wait_until = 3;

  // DidSave the client supports did save notifications.
  bool did_save = 4;
}

// TypeDefinitionClientCapabilities since 3.6.0.
message TypeDefinitionClientCapabilities {
  // DynamicRegistration whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `TypeDefinitionRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // LinkSupport the client supports additional metadata in the form of definition links.
  //
  // Since 3.14.0.
  bool link_support = 2;
}

message WindowClientCapabilities {
  // WorkDoneProgress it indicates whether the client supports server initiated
  // progress using the `window/workDoneProgress/create` request.
  //
  // The capability also controls Whether client supports handling
  // of progress notifications. If set servers are allowed to report a
  // `workDoneProgress` property in the request specific server
  // capabilities.
  bool work_done_progress = 1;

  ShowDocumentClientCapabilities show_document = 2;
}

// WorkspaceClientCapabilities workspace specific client capabilities.
message WorkspaceClientCapabilities {
  // ApplyEdit the client supports applying batch edits
  // to the workspace by supporting the request
  // 'workspace/applyEdit'.
  bool apply_edit = 1;

  WorkspaceEditClientCapabilities workspace_edit = 2;

  DidChangeConfigurationClientCapabilities did_change_configuration = 3;

  DidChangeWatchedFilesClientCapabilities did_change_watched_files = 4;

  WorkspaceSymbolClientCapabilities symbol = 5;

  ExecuteCommandClientCapabilities execute_command = 6;

  // WorkspaceFolders the client has support for workspace folders.
  bool workspace_folders = 7;

  // Configuration the client supports `workspace/configuration` requests.
  bool configuration = 8;

  SemanticTokensWorkspaceClientCapabilities semantic_tokens = 9;

  CodeLensWorkspaceClientCapabilities code_lens = 10;

  FileOperationClientCapabilities file_operations = 11;
}

message WorkspaceEditClientCapabilities {
  // DocumentChanges the client supports versioned document changes in `WorkspaceEdit`s.
  bool document_changes = 1;

  // ResourceOperations the resource operations the client supports. Clients should at least
  // support 'create', 'rename' and 'delete' files and folders.
  repeated ResourceOperations resource_operations = 2;

  FailureHandlingKind failure_handling = 3;

  // NormalizesLineEndings whether the client normalizes line endings to the client specific
  // setting.
  // If set to `true` the client will normalize line ending characters
  // in a workspace edit containing to the client specific new line
  // character.
  bool normalizes_line_endings = 4;

  message ResourceOperations {
    ResourceOperations resource_operations = 1;

    message ResourceOperations {
      enum ResourceOperations {
        ResourceOperations_Create = 0;

        ResourceOperations_Delete = 1;

        ResourceOperations_Rename = 2;
      }
    }
  }
}

// WorkspaceSymbolClientCapabilities client capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
message WorkspaceSymbolClientCapabilities {
  // DynamicRegistration symbol request supports dynamic registration.
  bool dynamic_registration = 1;
}

// Uinteger defines an unsigned integer in the range of 0 to 2^31 - 1.
message Uinteger {
  int32 uinteger = 1;
}
