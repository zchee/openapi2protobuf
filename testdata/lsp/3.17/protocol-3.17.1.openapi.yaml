components:
  schemas:
    _InitializeParams:
      defaultProperties: []
      description: The initialize parameters
      properties:
        capabilities:
          $ref: '#/components/schemas/ClientCapabilities'
          description: The capabilities provided by the client (editor or tool)
          title: capabilities
        clientInfo:
          defaultProperties: []
          description: Information about the client
          properties:
            name:
              description: The name of the client as defined by the client.
              title: name
              type: string
            version:
              description: The client's version as defined by the client.
              title: version
              type: string
          x-propertyOrder:
          - name
          - version
          required:
          - name
          title: clientInfo
          type: object
        initializationOptions:
          $ref: '#/components/schemas/LSPAny'
          description: User provided initialization options.
          title: initializationOptions
        locale:
          description: |-
            The locale the client is currently showing the user interface
            in. This must not necessarily be the locale of the operating
            system.

            Uses IETF language tags as the value's syntax
            (See https://en.wikipedia.org/wiki/IETF_language_tag)
          title: locale
          type: string
        processId:
          description: |-
            The process Id of the parent process that started
            the server.
          title: processId
          type: integer
        rootPath:
          description: |-
            The rootPath of the workspace. Is null
            if no folder is open.
          title: rootPath
          type: string
        rootUri:
          description: |-
            The rootUri of the workspace. Is null if no
            folder is open. If both `rootPath` and `rootUri` are set
            `rootUri` wins.
          title: rootUri
          type: string
        trace:
          description: The initial trace setting. If omitted trace is disabled ('off').
          enum:
          - compact
          - messages
          - "off"
          - verbose
          title: trace
          type: string
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - processId
      - clientInfo
      - locale
      - rootPath
      - rootUri
      - capabilities
      - initializationOptions
      - trace
      - workDoneToken
      required:
      - capabilities
      - processId
      - rootUri
      title: _InitializeParams
      type: object
    AnnotatedTextEdit:
      defaultProperties: []
      description: A special text edit with an additional change annotation.
      properties:
        annotationId:
          $ref: '#/components/schemas/ChangeAnnotationIdentifier'
          description: The actual identifier of the change annotation
          title: annotationId
        newText:
          description: |-
            The string to be inserted. For delete operations use an
            empty string.
          title: newText
          type: string
        range:
          $ref: '#/components/schemas/Range'
          description: |-
            The range of the text document to be manipulated. To insert
            text into a document create a range where start === end.
          title: range
      x-propertyOrder:
      - annotationId
      - range
      - newText
      required:
      - annotationId
      - newText
      - range
      title: AnnotatedTextEdit
      type: object
    ApplyWorkspaceEditParams:
      defaultProperties: []
      description: The parameters passed via a apply workspace edit request.
      properties:
        edit:
          $ref: '#/components/schemas/WorkspaceEdit'
          description: The edits to apply.
          title: edit
        label:
          description: |-
            An optional label of the workspace edit. This label is
            presented in the user interface for example on an undo
            stack to undo the workspace edit.
          title: label
          type: string
      x-propertyOrder:
      - label
      - edit
      required:
      - edit
      title: ApplyWorkspaceEditParams
      type: object
    ApplyWorkspaceEditResponse:
      $ref: '#/components/schemas/ApplyWorkspaceEditResult'
    ApplyWorkspaceEditResult:
      defaultProperties: []
      description: The result returned from the apply workspace edit request.
      properties:
        applied:
          description: Indicates whether the edit was applied or not.
          title: applied
          type: boolean
        failedChange:
          $ref: '#/components/schemas/uinteger'
          description: |-
            Depending on the client's failure handling strategy `failedChange` might
            contain the index of the change that failed. This property is only available
            if the client signals a `failureHandlingStrategy` in its client capabilities.
          title: failedChange
        failureReason:
          description: |-
            An optional textual description for why the edit was not applied.
            This may be used by the server for diagnostic logging or to provide
            a suitable error for a request that triggered the edit.
          title: failureReason
          type: string
      x-propertyOrder:
      - applied
      - failureReason
      - failedChange
      required:
      - applied
      title: ApplyWorkspaceEditResult
      type: object
    CallHierarchyClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
            return value for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: CallHierarchyClientCapabilities
      type: object
    CallHierarchyOptions:
      defaultProperties: []
      description: Call hierarchy options used during static registration.
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: CallHierarchyOptions
      type: object
    CallHierarchyRegistrationOptions:
      defaultProperties: []
      description: Call hierarchy options used during static or dynamic registration.
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      - id
      required:
      - documentSelector
      title: CallHierarchyRegistrationOptions
      type: object
    ChangeAnnotation:
      defaultProperties: []
      description: Additional information that describes document changes.
      properties:
        description:
          description: |-
            A human-readable string which is rendered less prominent in
            the user interface.
          title: description
          type: string
        label:
          description: |-
            A human-readable string describing the actual change. The string
            is rendered prominent in the user interface.
          title: label
          type: string
        needsConfirmation:
          description: |-
            A flag which indicates that user confirmation is needed
            before applying the change.
          title: needsConfirmation
          type: boolean
      x-propertyOrder:
      - label
      - needsConfirmation
      - description
      required:
      - label
      title: ChangeAnnotation
      type: object
    ChangeAnnotationIdentifier:
      description: An identifier to refer to a change annotation stored with a workspace
        edit.
      title: ChangeAnnotationIdentifier
      type: string
    ClientCapabilities:
      defaultProperties: []
      description: Defines the capabilities provided by the client.
      properties:
        experimental:
          additionalProperties: true
          description: Experimental client capabilities.
          properties: {}
          title: experimental
          type: object
        general:
          $ref: '#/components/schemas/GeneralClientCapabilities'
          description: General client capabilities.
          title: general
        notebookDocument:
          $ref: '#/components/schemas/NotebookDocumentClientCapabilities'
          description: Capabilities specific to the notebook document support.
          title: notebookDocument
        textDocument:
          $ref: '#/components/schemas/TextDocumentClientCapabilities'
          description: Text document specific client capabilities.
          title: textDocument
        window:
          $ref: '#/components/schemas/WindowClientCapabilities'
          description: Window specific client capabilities.
          title: window
        workspace:
          $ref: '#/components/schemas/WorkspaceClientCapabilities'
          description: Workspace specific client capabilities.
          title: workspace
      x-propertyOrder:
      - workspace
      - textDocument
      - notebookDocument
      - window
      - general
      - experimental
      title: ClientCapabilities
      type: object
    CodeActionClientCapabilities:
      defaultProperties: []
      description: The Client Capabilities of a [CodeActionRequest](#CodeActionRequest).
      properties:
        codeActionLiteralSupport:
          defaultProperties: []
          description: |-
            The client support code action literals of type `CodeAction` as a valid
            response of the `textDocument/codeAction` request. If the property is not
            set the request can only return `Command` literals.
          properties:
            codeActionKind:
              defaultProperties: []
              description: |-
                The code action kind is support with the following value
                set.
              properties:
                valueSet:
                  description: |-
                    The code action kind values the client supports. When this
                    property exists the client also guarantees that it will
                    handle values outside its set gracefully and falls back
                    to a default value when unknown.
                  items:
                    type: string
                  title: valueSet
                  type: array
              x-propertyOrder:
              - valueSet
              required:
              - valueSet
              title: codeActionKind
              type: object
          x-propertyOrder:
          - codeActionKind
          required:
          - codeActionKind
          title: codeActionLiteralSupport
          type: object
        dataSupport:
          description: |-
            Whether code action supports the `data` property which is
            preserved between a `textDocument/codeAction` and a
            `codeAction/resolve` request.
          title: dataSupport
          type: boolean
        disabledSupport:
          description: Whether code action supports the `disabled` property.
          title: disabledSupport
          type: boolean
        dynamicRegistration:
          description: Whether code action supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        honorsChangeAnnotations:
          description: |-
            Whether th client honors the change annotations in
            text edits and resource operations returned via the
            `CodeAction#edit` property by for example presenting
            the workspace edit in the user interface and asking
            for confirmation.
          title: honorsChangeAnnotations
          type: boolean
        isPreferredSupport:
          description: Whether code action supports the `isPreferred` property.
          title: isPreferredSupport
          type: boolean
        resolveSupport:
          defaultProperties: []
          description: |-
            Whether the client support resolving additional code action
            properties via a separate `codeAction/resolve` request.
          properties:
            properties:
              description: The properties that a client can resolve lazily.
              items:
                type: string
              title: properties
              type: array
          x-propertyOrder:
          - properties
          required:
          - properties
          title: resolveSupport
          type: object
      x-propertyOrder:
      - dynamicRegistration
      - codeActionLiteralSupport
      - isPreferredSupport
      - disabledSupport
      - dataSupport
      - resolveSupport
      - honorsChangeAnnotations
      title: CodeActionClientCapabilities
      type: object
    CodeActionContext:
      defaultProperties: []
      description: |-
        Contains additional diagnostic information about the context in which
        a [code action](#CodeActionProvider.provideCodeActions) is run.
        The CodeActionContext namespace provides helper functions to work with
        [CodeActionContext](#CodeActionContext) literals.
      properties:
        diagnostics:
          description: |-
            An array of diagnostics known on the client side overlapping the range provided to the
            `textDocument/codeAction` request. They are provided so that the server knows which
            errors are currently presented to the user for the given range. There is no guarantee
            that these accurately reflect the error state of the resource. The primary parameter
            to compute code actions is the provided range.
          items:
            $ref: '#/components/schemas/Diagnostic'
          title: diagnostics
          type: array
        only:
          description: |-
            Requested kind of actions to return.

            Actions not of this kind are filtered out by the client before being shown. So servers
            can omit computing them.
          items:
            type: string
          title: only
          type: array
        triggerKind:
          $ref: '#/components/schemas/CodeActionTriggerKind'
          description: The reason why code actions were requested.
          title: triggerKind
      x-propertyOrder:
      - diagnostics
      - only
      - triggerKind
      required:
      - diagnostics
      title: CodeActionContext
      type: object
    CodeActionOptions:
      defaultProperties: []
      description: Provider options for a [CodeActionRequest](#CodeActionRequest).
      properties:
        codeActionKinds:
          description: |-
            CodeActionKinds that this server may return.

            The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
            may list out every specific kind they provide.
          items:
            type: string
          title: codeActionKinds
          type: array
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a code action.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - codeActionKinds
      - resolveProvider
      - workDoneProgress
      title: CodeActionOptions
      type: object
    CodeActionParams:
      defaultProperties: []
      description: The parameters of a [CodeActionRequest](#CodeActionRequest).
      properties:
        context:
          $ref: '#/components/schemas/CodeActionContext'
          description: Context carrying additional information.
          title: context
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        range:
          $ref: '#/components/schemas/Range'
          description: The range for which the command was invoked.
          title: range
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document in which the command was invoked.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - range
      - context
      - workDoneToken
      - partialResultToken
      required:
      - context
      - range
      - textDocument
      title: CodeActionParams
      type: object
    CodeActionRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [CodeActionRequest](#CodeActionRequest).
      properties:
        codeActionKinds:
          description: |-
            CodeActionKinds that this server may return.

            The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
            may list out every specific kind they provide.
          items:
            type: string
          title: codeActionKinds
          type: array
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a code action.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - codeActionKinds
      - resolveProvider
      - workDoneProgress
      required:
      - documentSelector
      title: CodeActionRegistrationOptions
      type: object
    CodeActionTriggerKind:
      description: The reason why code actions were requested.
      enum:
      - 1
      - 2
      title: CodeActionTriggerKind
      type: number
    CodeDescription:
      defaultProperties: []
      description: |-
        Structure to capture a description for an error code.
        The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
      properties:
        href:
          $ref: '#/components/schemas/URI'
          description: An URI to open with more information about the diagnostic error.
          title: href
      x-propertyOrder:
      - href
      required:
      - href
      title: CodeDescription
      type: object
    CodeLensClientCapabilities:
      defaultProperties: []
      description: The client capabilities  of a [CodeLensRequest](#CodeLensRequest).
      properties:
        dynamicRegistration:
          description: Whether code lens supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: CodeLensClientCapabilities
      type: object
    CodeLensOptions:
      defaultProperties: []
      description: Code Lens provider options of a [CodeLensRequest](#CodeLensRequest).
      properties:
        resolveProvider:
          description: Code lens has a resolve provider as well.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - resolveProvider
      - workDoneProgress
      title: CodeLensOptions
      type: object
    CodeLensParams:
      defaultProperties: []
      description: The parameters of a [CodeLensRequest](#CodeLensRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to request code lens for.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - workDoneToken
      - partialResultToken
      required:
      - textDocument
      title: CodeLensParams
      type: object
    CodeLensRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [CodeLensRequest](#CodeLensRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        resolveProvider:
          description: Code lens has a resolve provider as well.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - resolveProvider
      - workDoneProgress
      required:
      - documentSelector
      title: CodeLensRegistrationOptions
      type: object
    CodeLensWorkspaceClientCapabilities:
      defaultProperties: []
      properties:
        refreshSupport:
          description: |-
            Whether the client implementation supports a refresh request sent from the
            server to the client.

            Note that this event is global and will force the client to refresh all
            code lenses currently shown. It should be used with absolute care and is
            useful for situation where a server for example detect a project wide
            change that requires such a calculation.
          title: refreshSupport
          type: boolean
      x-propertyOrder:
      - refreshSupport
      title: CodeLensWorkspaceClientCapabilities
      type: object
    CompletionClientCapabilities:
      defaultProperties: []
      description: Completion client capabilities
      properties:
        completionItem:
          defaultProperties: []
          description: |-
            The client supports the following `CompletionItem` specific
            capabilities.
          properties:
            commitCharactersSupport:
              description: Client supports commit characters on a completion item.
              title: commitCharactersSupport
              type: boolean
            deprecatedSupport:
              description: Client supports the deprecated property on a completion item.
              title: deprecatedSupport
              type: boolean
            documentationFormat:
              description: |-
                Client supports the follow content formats for the documentation
                property. The order describes the preferred format of the client.
              items:
                description: |-
                  Describes the content type that a client supports in various
                  result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

                  Please note that `MarkupKinds` must not start with a `$`. This kinds
                  are reserved for internal usage.
                enum:
                - markdown
                - plaintext
                type: string
              title: documentationFormat
              type: array
            insertReplaceSupport:
              description: |-
                Client support insert replace edit to control different behavior if a
                completion item is inserted in the text or should replace text.
              title: insertReplaceSupport
              type: boolean
            insertTextModeSupport:
              defaultProperties: []
              description: |-
                The client supports the `insertTextMode` property on
                a completion item to override the whitespace handling mode
                as defined by the client (see `insertTextMode`).
              properties:
                valueSet:
                  items:
                    description: |-
                      How whitespace and indentation is handled during completion
                      item insertion.
                    enum:
                    - 1
                    - 2
                    type: number
                  title: valueSet
                  type: array
              x-propertyOrder:
              - valueSet
              required:
              - valueSet
              title: insertTextModeSupport
              type: object
            labelDetailsSupport:
              description: |-
                The client has support for completion item label
                details (see also `CompletionItemLabelDetails`).
              title: labelDetailsSupport
              type: boolean
            preselectSupport:
              description: Client supports the preselect property on a completion item.
              title: preselectSupport
              type: boolean
            resolveSupport:
              defaultProperties: []
              description: |-
                Indicates which properties a client can resolve lazily on a completion
                item. Before version 3.16.0 only the predefined properties `documentation`
                and `details` could be resolved lazily.
              properties:
                properties:
                  description: The properties that a client can resolve lazily.
                  items:
                    type: string
                  title: properties
                  type: array
              x-propertyOrder:
              - properties
              required:
              - properties
              title: resolveSupport
              type: object
            snippetSupport:
              description: |-
                Client supports snippets as insert text.

                A snippet can define tab stops and placeholders with `$1`, `$2`
                and `${3:foo}`. `$0` defines the final tab stop, it defaults to
                the end of the snippet. Placeholders with equal identifiers are linked,
                that is typing in one will update others too.
              title: snippetSupport
              type: boolean
            tagSupport:
              defaultProperties: []
              description: |-
                Client supports the tag property on a completion item. Clients supporting
                tags have to handle unknown tags gracefully. Clients especially need to
                preserve unknown tags when sending a completion item back to the server in
                a resolve call.
              properties:
                valueSet:
                  description: The tags supported by the client.
                  items:
                    enum:
                    - 1
                    type: number
                  title: valueSet
                  type: array
              x-propertyOrder:
              - valueSet
              required:
              - valueSet
              title: tagSupport
              type: object
          x-propertyOrder:
          - snippetSupport
          - commitCharactersSupport
          - documentationFormat
          - deprecatedSupport
          - preselectSupport
          - tagSupport
          - insertReplaceSupport
          - resolveSupport
          - insertTextModeSupport
          - labelDetailsSupport
          title: completionItem
          type: object
        completionItemKind:
          defaultProperties: []
          properties:
            valueSet:
              description: |-
                The completion item kind values the client supports. When this
                property exists the client also guarantees that it will
                handle values outside its set gracefully and falls back
                to a default value when unknown.

                If this property is not present the client only supports
                the completion items kinds from `Text` to `Reference` as defined in
                the initial version of the protocol.
              items:
                description: The kind of a completion entry.
                enum:
                - 1
                - 2
                - 3
                - 4
                - 5
                - 6
                - 7
                - 8
                - 9
                - 10
                - 11
                - 12
                - 13
                - 14
                - 15
                - 16
                - 17
                - 18
                - 19
                - 20
                - 21
                - 22
                - 23
                - 24
                - 25
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          title: completionItemKind
          type: object
        completionList:
          defaultProperties: []
          description: |-
            The client supports the following `CompletionList` specific
            capabilities.
          properties:
            itemDefaults:
              description: |-
                The client supports the the following itemDefaults on
                a completion list.

                The value lists the supported property names of the
                `CompletionList.itemDefaults` object. If omitted
                no properties are supported.
              items:
                type: string
              title: itemDefaults
              type: array
          x-propertyOrder:
          - itemDefaults
          title: completionList
          type: object
        contextSupport:
          description: |-
            The client supports to send additional context information for a
            `textDocument/completion` request.
          title: contextSupport
          type: boolean
        dynamicRegistration:
          description: Whether completion supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        insertTextMode:
          $ref: '#/components/schemas/InsertTextMode'
          description: |-
            Defines how the client handles whitespace and indentation
            when accepting a completion item that uses multi line
            text in either `insertText` or `textEdit`.
          title: insertTextMode
      x-propertyOrder:
      - dynamicRegistration
      - completionItem
      - completionItemKind
      - insertTextMode
      - contextSupport
      - completionList
      title: CompletionClientCapabilities
      type: object
    CompletionContext:
      defaultProperties: []
      description: Contains additional information about the context in which a completion
        request is triggered.
      properties:
        triggerCharacter:
          description: |-
            The trigger character (a single character) that has trigger code complete.
            Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`
          title: triggerCharacter
          type: string
        triggerKind:
          $ref: '#/components/schemas/CompletionTriggerKind'
          description: How the completion was triggered.
          title: triggerKind
      x-propertyOrder:
      - triggerKind
      - triggerCharacter
      required:
      - triggerKind
      title: CompletionContext
      type: object
    CompletionOptions:
      defaultProperties: []
      description: Completion options.
      properties:
        allCommitCharacters:
          description: |-
            The list of all possible characters that commit a completion. This field can be used
            if clients don't support individual commit characters per completion item. See
            `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`

            If a server provides both `allCommitCharacters` and commit characters on an individual
            completion item the ones on the completion item win.
          items:
            type: string
          title: allCommitCharacters
          type: array
        completionItem:
          defaultProperties: []
          description: |-
            The server supports the following `CompletionItem` specific
            capabilities.
          properties:
            labelDetailsSupport:
              description: |-
                The server has support for completion item label
                details (see also `CompletionItemLabelDetails`) when
                receiving a completion item in a resolve call.
              title: labelDetailsSupport
              type: boolean
          x-propertyOrder:
          - labelDetailsSupport
          title: completionItem
          type: object
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a completion item.
          title: resolveProvider
          type: boolean
        triggerCharacters:
          description: |-
            Most tools trigger completion request automatically without explicitly requesting
            it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
            starts to type an identifier. For example if the user types `c` in a JavaScript file
            code complete will automatically pop up present `console` besides others as a
            completion item. Characters that make up identifiers don't need to be listed here.

            If code complete should automatically be trigger on characters not being valid inside
            an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
          items:
            type: string
          title: triggerCharacters
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - triggerCharacters
      - allCommitCharacters
      - resolveProvider
      - completionItem
      - workDoneProgress
      title: CompletionOptions
      type: object
    CompletionParams:
      defaultProperties: []
      description: Completion parameters
      properties:
        context:
          $ref: '#/components/schemas/CompletionContext'
          description: |-
            The completion context. This is only available it the client specifies
            to send this using the client capability `textDocument.completion.contextSupport === true`
          title: context
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - context
      - textDocument
      - position
      - workDoneToken
      - partialResultToken
      required:
      - position
      - textDocument
      title: CompletionParams
      type: object
    CompletionRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [CompletionRequest](#CompletionRequest).
      properties:
        allCommitCharacters:
          description: |-
            The list of all possible characters that commit a completion. This field can be used
            if clients don't support individual commit characters per completion item. See
            `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`

            If a server provides both `allCommitCharacters` and commit characters on an individual
            completion item the ones on the completion item win.
          items:
            type: string
          title: allCommitCharacters
          type: array
        completionItem:
          defaultProperties: []
          description: |-
            The server supports the following `CompletionItem` specific
            capabilities.
          properties:
            labelDetailsSupport:
              description: |-
                The server has support for completion item label
                details (see also `CompletionItemLabelDetails`) when
                receiving a completion item in a resolve call.
              title: labelDetailsSupport
              type: boolean
          x-propertyOrder:
          - labelDetailsSupport
          title: completionItem
          type: object
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a completion item.
          title: resolveProvider
          type: boolean
        triggerCharacters:
          description: |-
            Most tools trigger completion request automatically without explicitly requesting
            it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
            starts to type an identifier. For example if the user types `c` in a JavaScript file
            code complete will automatically pop up present `console` besides others as a
            completion item. Characters that make up identifiers don't need to be listed here.

            If code complete should automatically be trigger on characters not being valid inside
            an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
          items:
            type: string
          title: triggerCharacters
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - triggerCharacters
      - allCommitCharacters
      - resolveProvider
      - completionItem
      - workDoneProgress
      required:
      - documentSelector
      title: CompletionRegistrationOptions
      type: object
    CompletionTriggerKind:
      description: How a completion was triggered
      enum:
      - 1
      - 2
      - 3
      title: CompletionTriggerKind
      type: number
    CreateFile:
      defaultProperties: []
      description: Create file operation.
      properties:
        annotationId:
          $ref: '#/components/schemas/ChangeAnnotationIdentifier'
          description: An optional annotation identifier describing the operation.
          title: annotationId
        kind:
          description: A create
          enum:
          - create
          title: kind
          type: string
        options:
          $ref: '#/components/schemas/CreateFileOptions'
          description: Additional options
          title: options
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The resource to create.
          title: uri
      x-propertyOrder:
      - kind
      - uri
      - options
      - annotationId
      required:
      - kind
      - uri
      title: CreateFile
      type: object
    CreateFileOptions:
      defaultProperties: []
      description: Options to create a file.
      properties:
        ignoreIfExists:
          description: Ignore if exists.
          title: ignoreIfExists
          type: boolean
        overwrite:
          description: Overwrite existing file. Overwrite wins over `ignoreIfExists`
          title: overwrite
          type: boolean
      x-propertyOrder:
      - overwrite
      - ignoreIfExists
      title: CreateFileOptions
      type: object
    DeclarationClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether declaration supports dynamic registration. If this is set to `true`
            the client supports the new `DeclarationRegistrationOptions` return value
            for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
        linkSupport:
          description: The client supports additional metadata in the form of declaration
            links.
          title: linkSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - linkSupport
      title: DeclarationClientCapabilities
      type: object
    DeclarationOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DeclarationOptions
      type: object
    DeclarationRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      - documentSelector
      - id
      required:
      - documentSelector
      title: DeclarationRegistrationOptions
      type: object
    DefinitionClientCapabilities:
      defaultProperties: []
      description: Client Capabilities for a [DefinitionRequest](#DefinitionRequest).
      properties:
        dynamicRegistration:
          description: Whether definition supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        linkSupport:
          description: The client supports additional metadata in the form of definition
            links.
          title: linkSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - linkSupport
      title: DefinitionClientCapabilities
      type: object
    DefinitionOptions:
      defaultProperties: []
      description: Server Capabilities for a [DefinitionRequest](#DefinitionRequest).
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DefinitionOptions
      type: object
    DefinitionParams:
      defaultProperties: []
      description: Parameters for a [DefinitionRequest](#DefinitionRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - position
      - workDoneToken
      - partialResultToken
      required:
      - position
      - textDocument
      title: DefinitionParams
      type: object
    DefinitionRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DefinitionRequest](#DefinitionRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: DefinitionRegistrationOptions
      type: object
    DeleteFile:
      defaultProperties: []
      description: Delete file operation
      properties:
        annotationId:
          $ref: '#/components/schemas/ChangeAnnotationIdentifier'
          description: An optional annotation identifier describing the operation.
          title: annotationId
        kind:
          description: A delete
          enum:
          - delete
          title: kind
          type: string
        options:
          $ref: '#/components/schemas/DeleteFileOptions'
          description: Delete options.
          title: options
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The file to delete.
          title: uri
      x-propertyOrder:
      - kind
      - uri
      - options
      - annotationId
      required:
      - kind
      - uri
      title: DeleteFile
      type: object
    DeleteFileOptions:
      defaultProperties: []
      description: Delete file options
      properties:
        ignoreIfNotExists:
          description: Ignore the operation if the file doesn't exist.
          title: ignoreIfNotExists
          type: boolean
        recursive:
          description: Delete the content recursively if a folder is denoted.
          title: recursive
          type: boolean
      x-propertyOrder:
      - recursive
      - ignoreIfNotExists
      title: DeleteFileOptions
      type: object
    Diagnostic:
      defaultProperties: []
      description: |-
        Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
        are only valid in the scope of a resource.
        The Diagnostic namespace provides helper functions to work with
        [Diagnostic](#Diagnostic) literals.
      properties:
        code:
          description: The diagnostic's code, which usually appear in the user interface.
          title: code
          anyOf:
          - type: string
            nullable: false
          - type: integer
            nullable: false
        codeDescription:
          $ref: '#/components/schemas/CodeDescription'
          description: |-
            An optional property to describe the error code.
            Requires the code field (above) to be present/not null.
          title: codeDescription
        data:
          $ref: '#/components/schemas/LSPAny'
          description: |-
            A data entry field that is preserved between a `textDocument/publishDiagnostics`
            notification and `textDocument/codeAction` request.
          title: data
        message:
          description: The diagnostic's message. It usually appears in the user interface
          title: message
          type: string
        range:
          $ref: '#/components/schemas/Range'
          description: The range at which the message applies
          title: range
        relatedInformation:
          description: |-
            An array of related diagnostic information, e.g. when symbol-names within
            a scope collide all components/schemas can be marked via this property.
          items:
            $ref: '#/components/schemas/DiagnosticRelatedInformation'
          title: relatedInformation
          type: array
        severity:
          $ref: '#/components/schemas/DiagnosticSeverity'
          description: |-
            The diagnostic's severity. Can be omitted. If omitted it is up to the
            client to interpret diagnostics as error, warning, info or hint.
          title: severity
        source:
          description: |-
            A human-readable string describing the source of this
            diagnostic, e.g. 'typescript' or 'super lint'. It usually
            appears in the user interface.
          title: source
          type: string
        tags:
          description: Additional metadata about the diagnostic.
          items:
            description: The diagnostic tags.
            enum:
            - 1
            - 2
            type: number
          title: tags
          type: array
      x-propertyOrder:
      - range
      - severity
      - code
      - codeDescription
      - source
      - message
      - tags
      - relatedInformation
      - data
      required:
      - message
      - range
      title: Diagnostic
      type: object
    DiagnosticClientCapabilities:
      defaultProperties: []
      description: |-
        A notebook cell text document filter denotes a cell text
        document by different properties.
        The NotebookCellTextDocumentFilter namespace provides helper functions to work with
        [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
      properties:
        language:
          description: |-
            A language id like `python`.

            Will be matched against the language id of the
            notebook cell document. '*' matches every language.
          title: language
          type: string
        notebook:
          anyOf:
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            x-propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - notebookType
            type: object
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            x-propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - scheme
            type: object
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            x-propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - pattern
            type: object
          - type: string
          description: |-
            A filter that matches against the notebook
            containing the notebook cell. If a string
            value is provided it matches against the
            notebook type. '*' matches every notebook.
          title: notebook
      x-propertyOrder:
      - notebook
      - language
      required:
      - notebook
      title: DiagnosticClientCapabilities
      type: object
    DiagnosticOptions:
      allOf:
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - defaultProperties: []
        properties:
          identifier:
            description: |-
              An optional identifier under which the diagnostics are
              managed by the client.
            title: identifier
            type: string
          interFileDependencies:
            description: |-
              Whether the language has inter file dependencies meaning that
              editing code in one file can result in a different diagnostic
              set in another file. Inter file dependencies are common for
              most programming languages and typically uncommon for linters.
            title: interFileDependencies
            type: boolean
          workspaceDiagnostics:
            description: The server provides support for workspace diagnostics as well.
            title: workspaceDiagnostics
            type: boolean
        x-propertyOrder:
        - identifier
        - interFileDependencies
        - workspaceDiagnostics
        required:
        - interFileDependencies
        - workspaceDiagnostics
        type: object
      description: Diagnostic options.
      title: DiagnosticOptions
    DiagnosticRegistrationOptions:
      allOf:
      - $ref: '#/components/schemas/TextDocumentRegistrationOptions'
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - defaultProperties: []
        properties:
          identifier:
            description: |-
              An optional identifier under which the diagnostics are
              managed by the client.
            title: identifier
            type: string
          interFileDependencies:
            description: |-
              Whether the language has inter file dependencies meaning that
              editing code in one file can result in a different diagnostic
              set in another file. Inter file dependencies are common for
              most programming languages and typically uncommon for linters.
            title: interFileDependencies
            type: boolean
          workspaceDiagnostics:
            description: The server provides support for workspace diagnostics as well.
            title: workspaceDiagnostics
            type: boolean
        x-propertyOrder:
        - identifier
        - interFileDependencies
        - workspaceDiagnostics
        required:
        - interFileDependencies
        - workspaceDiagnostics
        type: object
      - $ref: '#/components/schemas/StaticRegistrationOptions'
      description: Diagnostic registration options.
      title: DiagnosticRegistrationOptions
    DiagnosticRelatedInformation:
      defaultProperties: []
      description: |-
        Represents a related message and source code location for a diagnostic. This should be
        used to point to code locations that cause or related to a diagnostics, e.g when duplicating
        a symbol in a scope.
        The DiagnosticRelatedInformation namespace provides helper functions to work with
        [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.
      properties:
        location:
          $ref: '#/components/schemas/Location'
          description: The location of this related diagnostic information.
          title: location
        message:
          description: The message of this related diagnostic information.
          title: message
          type: string
      x-propertyOrder:
      - location
      - message
      required:
      - location
      - message
      title: DiagnosticRelatedInformation
      type: object
    DiagnosticSeverity:
      description: The diagnostic's severity.
      enum:
      - 1
      - 2
      - 3
      - 4
      title: DiagnosticSeverity
      type: number
    DiagnosticWorkspaceClientCapabilities:
      defaultProperties: []
      description: Workspace client capabilities specific to diagnostic pull requests.
      properties:
        refreshSupport:
          description: |-
            Whether the client implementation supports a refresh request sent from
            the server to the client.

            Note that this event is global and will force the client to refresh all
            pulled diagnostics currently shown. It should be used with absolute care and
            is useful for situation where a server for example detects a project wide
            change that requires such a calculation.
          title: refreshSupport
          type: boolean
      x-propertyOrder:
      - refreshSupport
      title: DiagnosticWorkspaceClientCapabilities
      type: object
    DidChangeConfigurationClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: Did change configuration notification supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DidChangeConfigurationClientCapabilities
      type: object
    DidChangeConfigurationParams:
      defaultProperties: []
      description: The parameters of a change configuration notification.
      properties:
        settings:
          $ref: '#/components/schemas/LSPAny'
          description: The actual changed settings
          title: settings
      x-propertyOrder:
      - settings
      required:
      - settings
      title: DidChangeConfigurationParams
      type: object
    DidChangeConfigurationRegistrationOptions:
      defaultProperties: []
      properties:
        section:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: section
      x-propertyOrder:
      - section
      title: DidChangeConfigurationRegistrationOptions
      type: object
    DidChangeTextDocumentParams:
      defaultProperties: []
      description: The change text document notification's parameters.
      properties:
        contentChanges:
          description: |-
            The actual content changes. The content changes describe single state changes
            to the document. So if there are two content changes c1 (at array index 0) and
            c2 (at array index 1) for a document in state S then c1 moves the document from
            S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
            on the state S'.

            To mirror the content of a document using change events use the following approach:
            - start with the same initial content
            - apply the 'textDocument/didChange' notifications in the order you receive them.
            - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
              you receive them.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                range:
                  $ref: '#/components/schemas/Range'
                  description: The range of the document that changed.
                  title: range
                rangeLength:
                  $ref: '#/components/schemas/uinteger'
                  description: The optional length of the range that got replaced.
                  title: rangeLength
                text:
                  description: The new text for the provided range.
                  title: text
                  type: string
              x-propertyOrder:
              - range
              - rangeLength
              - text
              required:
              - range
              - text
              type: object
            - defaultProperties: []
              properties:
                text:
                  description: The new text of the whole document.
                  title: text
                  type: string
              x-propertyOrder:
              - text
              required:
              - text
              type: object
            description: |-
              An event describing a change to a text document. If only a text is provided
              it is considered to be the full content of the document.
          title: contentChanges
          type: array
        textDocument:
          $ref: '#/components/schemas/VersionedTextDocumentIdentifier'
          description: |-
            The document that did change. The version number points
            to the version after all provided content changes have
            been applied.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - contentChanges
      required:
      - contentChanges
      - textDocument
      title: DidChangeTextDocumentParams
      type: object
    DidChangeWatchedFilesClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Did change watched files notification supports dynamic registration. Please note
            that the current protocol doesn't support static configuration for file changes
            from the server side.
          title: dynamicRegistration
          type: boolean
        relativePatternSupport:
          description: Whether the client has support for{@linkRelativePatternrelative
            pattern}or not.
          title: relativePatternSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - relativePatternSupport
      title: DidChangeWatchedFilesClientCapabilities
      type: object
    DidChangeWatchedFilesParams:
      defaultProperties: []
      description: The watched files change notification's parameters.
      properties:
        changes:
          description: The actual file events.
          items:
            $ref: '#/components/schemas/FileEvent'
          title: changes
          type: array
      x-propertyOrder:
      - changes
      required:
      - changes
      title: DidChangeWatchedFilesParams
      type: object
    DidChangeWatchedFilesRegistrationOptions:
      defaultProperties: []
      description: Describe options to be used when registered for text document change
        events.
      properties:
        watchers:
          description: The watchers to register.
          items:
            $ref: '#/components/schemas/FileSystemWatcher'
          title: watchers
          type: array
      x-propertyOrder:
      - watchers
      required:
      - watchers
      title: DidChangeWatchedFilesRegistrationOptions
      type: object
    DidCloseTextDocumentParams:
      defaultProperties: []
      description: The parameters send in a close text document notification
      properties:
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document that was closed.
          title: textDocument
      x-propertyOrder:
      - textDocument
      required:
      - textDocument
      title: DidCloseTextDocumentParams
      type: object
    DidOpenTextDocumentParams:
      defaultProperties: []
      description: The parameters send in a open text document notification
      properties:
        textDocument:
          $ref: '#/components/schemas/TextDocumentItem'
          description: The document that was opened.
          title: textDocument
      x-propertyOrder:
      - textDocument
      required:
      - textDocument
      title: DidOpenTextDocumentParams
      type: object
    DidSaveTextDocumentParams:
      defaultProperties: []
      description: The parameters send in a save text document notification
      properties:
        text:
          description: |-
            Optional the content when saved. Depends on the includeText value
            when the save notification was requested.
          title: text
          type: string
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document that was closed.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - text
      required:
      - textDocument
      title: DidSaveTextDocumentParams
      type: object
    DocumentColorClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `DocumentColorRegistrationOptions` return value
            for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DocumentColorClientCapabilities
      type: object
    DocumentColorOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DocumentColorOptions
      type: object
    DocumentColorRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - id
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentColorRegistrationOptions
      type: object
    DocumentFilter:
      anyOf:
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - language
        type: object
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - scheme
        type: object
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - pattern
        type: object
      - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
        description: |-
          A notebook cell text document filter denotes a cell text
          document by different properties.
          The NotebookCellTextDocumentFilter namespace provides helper functions to work with
          [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
      description: |-
        A document filter describes a top level text document or
        a notebook cell document.
    DocumentFormattingClientCapabilities:
      defaultProperties: []
      description: Client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest).
      properties:
        dynamicRegistration:
          description: Whether formatting supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DocumentFormattingClientCapabilities
      type: object
    DocumentFormattingOptions:
      defaultProperties: []
      description: Provider options for a [DocumentFormattingRequest](#DocumentFormattingRequest).
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DocumentFormattingOptions
      type: object
    DocumentFormattingParams:
      defaultProperties: []
      description: The parameters of a [DocumentFormattingRequest](#DocumentFormattingRequest).
      properties:
        options:
          $ref: '#/components/schemas/FormattingOptions'
          description: The format options
          title: options
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to format.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - options
      - workDoneToken
      required:
      - options
      - textDocument
      title: DocumentFormattingParams
      type: object
    DocumentFormattingRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentFormattingRequest](#DocumentFormattingRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentFormattingRegistrationOptions
      type: object
    DocumentHighlightClientCapabilities:
      defaultProperties: []
      description: Client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest).
      properties:
        dynamicRegistration:
          description: Whether document highlight supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DocumentHighlightClientCapabilities
      type: object
    DocumentHighlightOptions:
      defaultProperties: []
      description: Provider options for a [DocumentHighlightRequest](#DocumentHighlightRequest).
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DocumentHighlightOptions
      type: object
    DocumentHighlightParams:
      defaultProperties: []
      description: Parameters for a [DocumentHighlightRequest](#DocumentHighlightRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - position
      - workDoneToken
      - partialResultToken
      required:
      - position
      - textDocument
      title: DocumentHighlightParams
      type: object
    DocumentHighlightRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentHighlightRequest](#DocumentHighlightRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentHighlightRegistrationOptions
      type: object
    DocumentLinkClientCapabilities:
      defaultProperties: []
      description: The client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest).
      properties:
        dynamicRegistration:
          description: Whether document link supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        tooltipSupport:
          description: Whether the client support the `tooltip` property on `DocumentLink`.
          title: tooltipSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - tooltipSupport
      title: DocumentLinkClientCapabilities
      type: object
    DocumentLinkOptions:
      defaultProperties: []
      description: Provider options for a [DocumentLinkRequest](#DocumentLinkRequest).
      properties:
        resolveProvider:
          description: Document links have a resolve provider as well.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - resolveProvider
      - workDoneProgress
      title: DocumentLinkOptions
      type: object
    DocumentLinkParams:
      defaultProperties: []
      description: The parameters of a [DocumentLinkRequest](#DocumentLinkRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to provide document links for.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - workDoneToken
      - partialResultToken
      required:
      - textDocument
      title: DocumentLinkParams
      type: object
    DocumentLinkRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentLinkRequest](#DocumentLinkRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        resolveProvider:
          description: Document links have a resolve provider as well.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - resolveProvider
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentLinkRegistrationOptions
      type: object
    DocumentOnTypeFormattingClientCapabilities:
      defaultProperties: []
      description: Client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
      properties:
        dynamicRegistration:
          description: Whether on type formatting supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DocumentOnTypeFormattingClientCapabilities
      type: object
    DocumentOnTypeFormattingOptions:
      defaultProperties: []
      description: Provider options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
      properties:
        firstTriggerCharacter:
          description: A character on which formatting should be triggered, like `{}`.
          title: firstTriggerCharacter
          type: string
        moreTriggerCharacter:
          description: More trigger characters.
          items:
            type: string
          title: moreTriggerCharacter
          type: array
      x-propertyOrder:
      - firstTriggerCharacter
      - moreTriggerCharacter
      required:
      - firstTriggerCharacter
      title: DocumentOnTypeFormattingOptions
      type: object
    DocumentOnTypeFormattingParams:
      defaultProperties: []
      description: The parameters of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
      properties:
        ch:
          description: |-
            The character that has been typed that triggered the formatting
            on type request. That is not necessarily the last character that
            got inserted into the document since the client could auto insert
            characters as well (e.g. like automatic brace completion).
          title: ch
          type: string
        options:
          $ref: '#/components/schemas/FormattingOptions'
          description: The format options.
          title: options
        position:
          $ref: '#/components/schemas/Position'
          description: |-
            The position around which the on type formatting should happen.
            This is not necessarily the exact position where the character denoted
            by the property `ch` got typed.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to format.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - position
      - ch
      - options
      required:
      - ch
      - options
      - position
      - textDocument
      title: DocumentOnTypeFormattingParams
      type: object
    DocumentOnTypeFormattingRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        firstTriggerCharacter:
          description: A character on which formatting should be triggered, like `{}`.
          title: firstTriggerCharacter
          type: string
        moreTriggerCharacter:
          description: More trigger characters.
          items:
            type: string
          title: moreTriggerCharacter
          type: array
      x-propertyOrder:
      - documentSelector
      - firstTriggerCharacter
      - moreTriggerCharacter
      required:
      - documentSelector
      - firstTriggerCharacter
      title: DocumentOnTypeFormattingRegistrationOptions
      type: object
    DocumentRangeFormattingClientCapabilities:
      defaultProperties: []
      description: Client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
      properties:
        dynamicRegistration:
          description: Whether range formatting supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: DocumentRangeFormattingClientCapabilities
      type: object
    DocumentRangeFormattingOptions:
      defaultProperties: []
      description: Provider options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: DocumentRangeFormattingOptions
      type: object
    DocumentRangeFormattingParams:
      defaultProperties: []
      description: The parameters of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
      properties:
        options:
          $ref: '#/components/schemas/FormattingOptions'
          description: The format options
          title: options
        range:
          $ref: '#/components/schemas/Range'
          description: The range to format
          title: range
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to format.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - range
      - options
      - workDoneToken
      required:
      - options
      - range
      - textDocument
      title: DocumentRangeFormattingParams
      type: object
    DocumentRangeFormattingRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentRangeFormattingRegistrationOptions
      type: object
    DocumentSelector:
      description: |-
        A document selector is the combination of one or many document filters.
        The DocumentSelector namespace provides helper functions to work with
        [DocumentSelector](#DocumentSelector)s.
      items:
        anyOf:
        - defaultProperties: []
          properties:
            language:
              description: A language id, like `typescript`.
              title: language
              type: string
            pattern:
              description: A glob pattern, like `*.{ts,js}`.
              title: pattern
              type: string
            scheme:
              description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
              title: scheme
              type: string
          x-propertyOrder:
          - language
          - scheme
          - pattern
          required:
          - language
          type: object
        - defaultProperties: []
          properties:
            language:
              description: A language id, like `typescript`.
              title: language
              type: string
            pattern:
              description: A glob pattern, like `*.{ts,js}`.
              title: pattern
              type: string
            scheme:
              description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
              title: scheme
              type: string
          x-propertyOrder:
          - language
          - scheme
          - pattern
          required:
          - scheme
          type: object
        - defaultProperties: []
          properties:
            language:
              description: A language id, like `typescript`.
              title: language
              type: string
            pattern:
              description: A glob pattern, like `*.{ts,js}`.
              title: pattern
              type: string
            scheme:
              description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
              title: scheme
              type: string
          x-propertyOrder:
          - language
          - scheme
          - pattern
          required:
          - pattern
          type: object
        - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
          description: |-
            A notebook cell text document filter denotes a cell text
            document by different properties.
            The NotebookCellTextDocumentFilter namespace provides helper functions to work with
            [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
        - type: string
      type: array
    DocumentSymbolClientCapabilities:
      defaultProperties: []
      description: Client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest).
      properties:
        dynamicRegistration:
          description: Whether document symbol supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        hierarchicalDocumentSymbolSupport:
          description: The client support hierarchical document symbols.
          title: hierarchicalDocumentSymbolSupport
          type: boolean
        labelSupport:
          description: |-
            The client supports an additional label presented in the UI when
            registering a document symbol provider.
          title: labelSupport
          type: boolean
        symbolKind:
          defaultProperties: []
          description: Specific capabilities for the `SymbolKind`.
          properties:
            valueSet:
              description: |-
                The symbol kind values the client supports. When this
                property exists the client also guarantees that it will
                handle values outside its set gracefully and falls back
                to a default value when unknown.

                If this property is not present the client only supports
                the symbol kinds from `File` to `Array` as defined in
                the initial version of the protocol.
              items:
                description: A symbol kind.
                enum:
                - 1
                - 2
                - 3
                - 4
                - 5
                - 6
                - 7
                - 8
                - 9
                - 10
                - 11
                - 12
                - 13
                - 14
                - 15
                - 16
                - 17
                - 18
                - 19
                - 20
                - 21
                - 22
                - 23
                - 24
                - 25
                - 26
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          title: symbolKind
          type: object
        tagSupport:
          defaultProperties: []
          description: |-
            The client supports tags on `SymbolInformation`. Tags are supported on
            `DocumentSymbol` if `hierarchicalDocumentSymbolSupport` is set to true.
            Clients supporting tags have to handle unknown tags gracefully.
          properties:
            valueSet:
              description: The tags supported by the client.
              items:
                enum:
                - 1
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          required:
          - valueSet
          title: tagSupport
          type: object
      x-propertyOrder:
      - dynamicRegistration
      - symbolKind
      - hierarchicalDocumentSymbolSupport
      - tagSupport
      - labelSupport
      title: DocumentSymbolClientCapabilities
      type: object
    DocumentSymbolOptions:
      defaultProperties: []
      description: Provider options for a [DocumentSymbolRequest](#DocumentSymbolRequest).
      properties:
        label:
          description: |-
            A human-readable string that is shown when multiple outlines trees
            are shown for the same document.
          title: label
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - label
      - workDoneProgress
      title: DocumentSymbolOptions
      type: object
    DocumentSymbolParams:
      defaultProperties: []
      description: Parameters for a [DocumentSymbolRequest](#DocumentSymbolRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - workDoneToken
      - partialResultToken
      required:
      - textDocument
      title: DocumentSymbolParams
      type: object
    DocumentSymbolRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [DocumentSymbolRequest](#DocumentSymbolRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        label:
          description: |-
            A human-readable string that is shown when multiple outlines trees
            are shown for the same document.
          title: label
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - label
      - workDoneProgress
      required:
      - documentSelector
      title: DocumentSymbolRegistrationOptions
      type: object
    DocumentUri:
      description: A tagging type for string properties that are actually document URIs.
      title: DocumentUri
      type: string
    ExecuteCommandClientCapabilities:
      defaultProperties: []
      description: The client capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).
      properties:
        dynamicRegistration:
          description: Execute command supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: ExecuteCommandClientCapabilities
      type: object
    ExecuteCommandOptions:
      defaultProperties: []
      description: The server capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).
      properties:
        commands:
          description: The commands to be executed on the server
          items:
            type: string
          title: commands
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - commands
      - workDoneProgress
      required:
      - commands
      title: ExecuteCommandOptions
      type: object
    ExecuteCommandParams:
      defaultProperties: []
      description: The parameters of a [ExecuteCommandRequest](#ExecuteCommandRequest).
      properties:
        arguments:
          description: Arguments that the command should be invoked with.
          items: {}
          title: arguments
          type: array
        command:
          description: The identifier of the actual command handler.
          title: command
          type: string
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - command
      - arguments
      - workDoneToken
      required:
      - command
      title: ExecuteCommandParams
      type: object
    ExecuteCommandRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [ExecuteCommandRequest](#ExecuteCommandRequest).
      properties:
        commands:
          description: The commands to be executed on the server
          items:
            type: string
          title: commands
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - commands
      - workDoneProgress
      required:
      - commands
      title: ExecuteCommandRegistrationOptions
      type: object
    FailureHandlingKind:
      enum:
      - abort
      - textOnlyTransactional
      - transactional
      - undo
      title: FailureHandlingKind
      type: string
    FileChangeType:
      description: The file event type
      enum:
      - 1
      - 2
      - 3
      title: FileChangeType
      type: number
    FileEvent:
      defaultProperties: []
      description: An event describing a file change.
      properties:
        type:
          $ref: '#/components/schemas/FileChangeType'
          description: The change type.
          title: type
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The file's uri.
          title: uri
      x-propertyOrder:
      - uri
      - type
      required:
      - type
      - uri
      title: FileEvent
      type: object
    FileOperationClientCapabilities:
      defaultProperties: []
      description: |-
        Capabilities relating to events from file operations by the user in the client.

        These events do not come from the file system, they come from user operations
        like renaming a file in the UI.
      properties:
        didCreate:
          description: The client has support for sending didCreateFiles notifications.
          title: didCreate
          type: boolean
        didDelete:
          description: The client has support for sending didDeleteFiles notifications.
          title: didDelete
          type: boolean
        didRename:
          description: The client has support for sending didRenameFiles notifications.
          title: didRename
          type: boolean
        dynamicRegistration:
          description: Whether the client supports dynamic registration for file requests/notifications.
          title: dynamicRegistration
          type: boolean
        willCreate:
          description: The client has support for willCreateFiles requests.
          title: willCreate
          type: boolean
        willDelete:
          description: The client has support for willDeleteFiles requests.
          title: willDelete
          type: boolean
        willRename:
          description: The client has support for willRenameFiles requests.
          title: willRename
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - didCreate
      - willCreate
      - didRename
      - willRename
      - didDelete
      - willDelete
      title: FileOperationClientCapabilities
      type: object
    FileOperationFilter:
      defaultProperties: []
      description: |-
        A filter to describe in which file operation requests or notifications
        the server is interested in.
      properties:
        pattern:
          $ref: '#/components/schemas/FileOperationPattern'
          description: The actual file operation pattern.
          title: pattern
        scheme:
          description: A Uri like `file` or `untitled`.
          title: scheme
          type: string
      x-propertyOrder:
      - scheme
      - pattern
      required:
      - pattern
      title: FileOperationFilter
      type: object
    FileOperationOptions:
      defaultProperties: []
      description: Options for notifications/requests for user operations on files.
      properties:
        didCreate:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in didCreateFiles notifications.
          title: didCreate
        didDelete:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in didDeleteFiles file notifications.
          title: didDelete
        didRename:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in didRenameFiles notifications.
          title: didRename
        willCreate:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in willCreateFiles requests.
          title: willCreate
        willDelete:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in willDeleteFiles file requests.
          title: willDelete
        willRename:
          $ref: '#/components/schemas/FileOperationRegistrationOptions'
          description: The server is interested in willRenameFiles requests.
          title: willRename
      x-propertyOrder:
      - didCreate
      - willCreate
      - didRename
      - willRename
      - didDelete
      - willDelete
      title: FileOperationOptions
      type: object
    FileOperationPattern:
      defaultProperties: []
      description: |-
        A pattern to describe in which file operation requests or notifications
        the server is interested in.
      properties:
        glob:
          description: |-
            The glob pattern to match. Glob patterns can have the following syntax:
            - `*` to match one or more characters in a path segment
            - `?` to match on one character in a path segment
            - `**` to match any number of path segments, including none
            - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
            - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
            - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
          title: glob
          type: string
        matches:
          $ref: '#/components/schemas/FileOperationPatternKind'
          description: |-
            Whether to match files or folders with this pattern.

            Matches both if undefined.
          title: matches
        options:
          $ref: '#/components/schemas/FileOperationPatternOptions'
          description: Additional options used during matching.
          title: options
      x-propertyOrder:
      - glob
      - matches
      - options
      required:
      - glob
      title: FileOperationPattern
      type: object
    FileOperationPatternKind:
      description: |-
        A pattern kind describing if a glob pattern matches a file a folder or
        both.
      enum:
      - file
      - folder
      title: FileOperationPatternKind
      type: string
    FileOperationPatternOptions:
      defaultProperties: []
      description: Matching options for the file operation pattern.
      properties:
        ignoreCase:
          description: The pattern should be matched ignoring casing.
          title: ignoreCase
          type: boolean
      x-propertyOrder:
      - ignoreCase
      title: FileOperationPatternOptions
      type: object
    FileOperationRegistrationOptions:
      defaultProperties: []
      description: The options to register for file operations.
      properties:
        filters:
          description: The actual filters.
          items:
            $ref: '#/components/schemas/FileOperationFilter'
          title: filters
          type: array
      x-propertyOrder:
      - filters
      required:
      - filters
      title: FileOperationRegistrationOptions
      type: object
    FileSystemWatcher:
      defaultProperties: []
      properties:
        globPattern:
          $ref: '#/components/schemas/GlobPattern'
          description: The glob pattern to watch. See{@linkGlobPatternglob pattern}for
            more detail.
          title: globPattern
        kind:
          $ref: '#/components/schemas/WatchKind'
          description: |-
            The kind of events of interest. If omitted it defaults
            to WatchKind.Create | WatchKind.Change | WatchKind.Delete
            which is 7.
          title: kind
      x-propertyOrder:
      - globPattern
      - kind
      required:
      - globPattern
      title: FileSystemWatcher
      type: object
    FoldingRangeClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration for folding range
            providers. If this is set to `true` the client supports the new
            `FoldingRangeRegistrationOptions` return value for the corresponding
            server capability as well.
          title: dynamicRegistration
          type: boolean
        foldingRange:
          defaultProperties: []
          description: Specific options for the folding range.
          properties:
            collapsedText:
              description: |-
                If set, the client signals that it supports setting collapsedText on
                folding ranges to display custom labels instead of the default text.
              title: collapsedText
              type: boolean
          x-propertyOrder:
          - collapsedText
          title: foldingRange
          type: object
        foldingRangeKind:
          defaultProperties: []
          description: Specific options for the folding range kind.
          properties:
            valueSet:
              description: |-
                The folding range kind values the client supports. When this
                property exists the client also guarantees that it will
                handle values outside its set gracefully and falls back
                to a default value when unknown.
              items:
                type: string
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          title: foldingRangeKind
          type: object
        lineFoldingOnly:
          description: |-
            If set, the client signals that it only supports folding complete lines.
            If set, client will ignore specified `startCharacter` and `endCharacter`
            properties in a FoldingRange.
          title: lineFoldingOnly
          type: boolean
        rangeLimit:
          $ref: '#/components/schemas/uinteger'
          description: |-
            The maximum number of folding ranges that the client prefers to receive
            per document. The value serves as a hint, servers are free to follow the
            limit.
          title: rangeLimit
      x-propertyOrder:
      - dynamicRegistration
      - rangeLimit
      - lineFoldingOnly
      - foldingRangeKind
      - foldingRange
      title: FoldingRangeClientCapabilities
      type: object
    FoldingRangeOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: FoldingRangeOptions
      type: object
    FoldingRangeRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      - id
      required:
      - documentSelector
      title: FoldingRangeRegistrationOptions
      type: object
    FormattingOptions:
      # additionalProperties:
      #   anyOf:
      #     - type: string
      #       nullable: false
      #     - type: integer
      #       nullable: false
      #     - type: boolean
      #       nullable: false
      defaultProperties: []
      description: |-
        Value-object describing what options formatting should use.
        The FormattingOptions namespace provides helper functions to work with
        [FormattingOptions](#FormattingOptions) literals.
      properties:
        insertFinalNewline:
          description: Insert a newline character at the end of the file if one does
            not exist.
          title: insertFinalNewline
          type: boolean
        insertSpaces:
          description: Prefer spaces over tabs.
          title: insertSpaces
          type: boolean
        tabSize:
          $ref: '#/components/schemas/uinteger'
          description: Size of a tab in spaces.
          title: tabSize
        trimFinalNewlines:
          description: Trim all newlines after the final newline at the end of the file.
          title: trimFinalNewlines
          type: boolean
        trimTrailingWhitespace:
          description: Trim trailing whitespaces on a line.
          title: trimTrailingWhitespace
          type: boolean
      x-propertyOrder:
      - tabSize
      - insertSpaces
      - trimTrailingWhitespace
      - insertFinalNewline
      - trimFinalNewlines
      required:
      - insertSpaces
      - tabSize
      title: FormattingOptions
      type: object
    GeneralClientCapabilities:
      defaultProperties: []
      description: General client capabilities.
      properties:
        markdown:
          $ref: '#/components/schemas/MarkdownClientCapabilities'
          description: Client capabilities specific to the client's markdown parser.
          title: markdown
        positionEncodings:
          description: |-
            The position encodings supported by the client. Client and server
            have to agree on the same position encoding to ensure that offsets
            (e.g. character position in a line) are interpreted the same on both
            side.

            To keep the protocol backwards compatible the following applies: if
            the value 'utf-16' is missing from the array of position encodings
            servers can assume that the client supports UTF-16. UTF-16 is
            therefore a mandatory encoding.

            If omitted it defaults to ['utf-16'].

            Implementation considerations: since the conversion from one encoding
            into another requires the content of the file / line the conversion
            is best done where the file is read which is usually on the server
            side.
          items:
            type: string
          title: positionEncodings
          type: array
        regularExpressions:
          $ref: '#/components/schemas/RegularExpressionsClientCapabilities'
          description: Client capabilities specific to regular expressions.
          title: regularExpressions
        staleRequestSupport:
          defaultProperties: []
          description: |-
            Client capability that signals how the client
            handles stale requests (e.g. a request
            for which the client will not process the response
            anymore since the information is outdated).
          properties:
            cancel:
              description: The client will actively cancel the request.
              title: cancel
              type: boolean
            retryOnContentModified:
              description: |-
                The list of requests for which the client
                will retry the request if it receives a
                response with error code `ContentModified`
              items:
                type: string
              title: retryOnContentModified
              type: array
          x-propertyOrder:
          - cancel
          - retryOnContentModified
          required:
          - cancel
          - retryOnContentModified
          title: staleRequestSupport
          type: object
      x-propertyOrder:
      - staleRequestSupport
      - regularExpressions
      - markdown
      - positionEncodings
      title: GeneralClientCapabilities
      type: object
    GlobPattern:
      anyOf:
      - $ref: '#/components/schemas/RelativePattern'
      - type: string
      description: The glob pattern. Either a string pattern or a relative pattern.
      title: GlobPattern
    HoverClientCapabilities:
      defaultProperties: []
      properties:
        contentFormat:
          description: |-
            Client supports the follow content formats for the content
            property. The order describes the preferred format of the client.
          items:
            description: |-
              Describes the content type that a client supports in various
              result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

              Please note that `MarkupKinds` must not start with a `$`. This kinds
              are reserved for internal usage.
            enum:
            - markdown
            - plaintext
            type: string
          title: contentFormat
          type: array
        dynamicRegistration:
          description: Whether hover supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - contentFormat
      title: HoverClientCapabilities
      type: object
    HoverOptions:
      defaultProperties: []
      description: Hover options.
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: HoverOptions
      type: object
    HoverParams:
      defaultProperties: []
      description: Parameters for a [HoverRequest](#HoverRequest).
      properties:
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - position
      - workDoneToken
      required:
      - position
      - textDocument
      title: HoverParams
      type: object
    HoverRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [HoverRequest](#HoverRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: HoverRegistrationOptions
      type: object
    ImplementationClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `ImplementationRegistrationOptions` return value
            for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
        linkSupport:
          description: The client supports additional metadata in the form of definition
            links.
          title: linkSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - linkSupport
      title: ImplementationClientCapabilities
      type: object
    ImplementationOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: ImplementationOptions
      type: object
    ImplementationRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      - id
      required:
      - documentSelector
      title: ImplementationRegistrationOptions
      type: object
    InitializeError:
      defaultProperties: []
      description: |-
        The data type of the ResponseError if the
        initialize request fails.
      properties:
        retry:
          description: |-
            Indicates whether the client execute the following retry logic:
            (1) show the message provided by the ResponseError to the user
            (2) user selects retry or cancel
            (3) if user selected retry the initialize method is sent again.
          title: retry
          type: boolean
      x-propertyOrder:
      - retry
      required:
      - retry
      title: InitializeError
      type: object
    InitializeErrorCodes:
      description: Known error codes for an `InitializeErrorCodes`;
      enum:
      - 1
      type: number
    InitializeParams:
      allOf:
      - $ref: '#/components/schemas/_InitializeParams'
      - $ref: '#/components/schemas/WorkspaceFoldersInitializeParams'
    InitializeResult:
      $ref: '#/components/schemas/InitializeResult<T>'
    InitializeResult.T:
      defaultProperties: []
      x-propertyOrder: []
      title: InitializeResult.T
      type: object
    InitializeResult<T>:
      additionalProperties: {}
      defaultProperties: []
      description: The result returned from an initialize request.
      properties:
        capabilities:
          $ref: '#/components/schemas/ServerCapabilities'
          description: The capabilities the language server provides.
          title: capabilities
        serverInfo:
          defaultProperties: []
          description: Information about the server.
          properties:
            name:
              description: The name of the server as defined by the server.
              title: name
              type: string
            version:
              description: The server's version as defined by the server.
              title: version
              type: string
          x-propertyOrder:
          - name
          - version
          required:
          - name
          title: serverInfo
          type: object
      x-propertyOrder:
      - capabilities
      - serverInfo
      required:
      - capabilities
      title: InitializeResult<T>
      type: object
    InitializedParams:
      defaultProperties: []
      x-propertyOrder: []
      title: InitializedParams
      type: object
    InlayHintClientCapabilities:
      defaultProperties: []
      description: Inlay hint client capabilities
      properties:
        dynamicRegistration:
          description: Whether inlay hints support dynamic registration.
          title: dynamicRegistration
          type: boolean
        resolveSupport:
          defaultProperties: []
          description: |-
            Indicates which properties a client can resolve lazily on a inlay
            hint.
          properties:
            properties:
              description: The properties that a client can resolve lazily.
              items:
                type: string
              title: properties
              type: array
          x-propertyOrder:
          - properties
          required:
          - properties
          title: resolveSupport
          type: object
      x-propertyOrder:
      - dynamicRegistration
      - resolveSupport
      title: InlayHintClientCapabilities
      type: object
    InlayHintOptions:
      allOf:
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - defaultProperties: []
        properties:
          resolveProvider:
            description: |-
              The server provides support to resolve additional
              information for an inlay hint item.
            title: resolveProvider
            type: boolean
        x-propertyOrder:
        - resolveProvider
        type: object
      description: Inlay hint options used during static registration.
      title: InlayHintOptions
    InlayHintRegistrationOptions:
      allOf:
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - defaultProperties: []
        properties:
          resolveProvider:
            description: |-
              The server provides support to resolve additional
              information for an inlay hint item.
            title: resolveProvider
            type: boolean
        x-propertyOrder:
        - resolveProvider
        type: object
      - $ref: '#/components/schemas/TextDocumentRegistrationOptions'
      - $ref: '#/components/schemas/StaticRegistrationOptions'
      description: Inlay hint options used during static or dynamic registration.
      title: InlayHintRegistrationOptions
    InlayHintWorkspaceClientCapabilities:
      defaultProperties: []
      description: Client workspace capabilities specific to inlay hints.
      properties:
        refreshSupport:
          description: |-
            Whether the client implementation supports a refresh request sent from
            the server to the client.

            Note that this event is global and will force the client to refresh all
            inlay hints currently shown. It should be used with absolute care and
            is useful for situation where a server for example detects a project wide
            change that requires such a calculation.
          title: refreshSupport
          type: boolean
      x-propertyOrder:
      - refreshSupport
      title: InlayHintWorkspaceClientCapabilities
      type: object
    InlineValueClientCapabilities:
      defaultProperties: []
      description: Client capabilities specific to inline values.
      properties:
        dynamicRegistration:
          description: Whether implementation supports dynamic registration for inline
            value providers.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: InlineValueClientCapabilities
      type: object
    InlineValueRegistrationOptions:
      allOf:
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - $ref: '#/components/schemas/TextDocumentRegistrationOptions'
      - $ref: '#/components/schemas/StaticRegistrationOptions'
      description: Inline value options used during static or dynamic registration.
      title: InlineValueRegistrationOptions
    InlineValueWorkspaceClientCapabilities:
      defaultProperties: []
      description: Client workspace capabilities specific to inline values.
      properties:
        refreshSupport:
          description: |-
            Whether the client implementation supports a refresh request sent from the
            server to the client.

            Note that this event is global and will force the client to refresh all
            inline values currently shown. It should be used with absolute care and is
            useful for situation where a server for example detects a project wide
            change that requires such a calculation.
          title: refreshSupport
          type: boolean
      x-propertyOrder:
      - refreshSupport
      title: InlineValueWorkspaceClientCapabilities
      type: object
    InsertTextMode:
      description: |-
        How whitespace and indentation is handled during completion
        item insertion.
      enum:
      - 1
      - 2
      title: InsertTextMode
      type: number
    LSPAny:
      description: |-
        The LSP any type.

        In the current implementation we map LSPAny to any. This is due to the fact
        that the TypeScript compilers can't infer string access signatures for
        interface correctly (it can though for types). See the following issue for
        details: https://github.com/microsoft/TypeScript/issues/15300.

        When the issue is addressed LSPAny can be defined as follows:

        ```ts
        export type LSPAny = LSPObject | LSPArray | string | integer | uinteger | decimal | boolean | null | undefined;
        export type LSPObject = { [key: string]: LSPAny };
        export type LSPArray = LSPAny[];
        ```

        Please note that strictly speaking a property with the value `undefined`
        can't be converted into JSON preserving the property name. However for
        convenience it is allowed and assumed that all these properties are
        optional as well.
      title: LSPAny
    LinkedEditingRangeClientCapabilities:
      defaultProperties: []
      description: Client capabilities for the linked editing range request.
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
            return value for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: LinkedEditingRangeClientCapabilities
      type: object
    LinkedEditingRangeOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: LinkedEditingRangeOptions
      type: object
    LinkedEditingRangeRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      - id
      required:
      - documentSelector
      title: LinkedEditingRangeRegistrationOptions
      type: object
    Location:
      defaultProperties: []
      description: |-
        Represents a location inside a resource, such as a line
        inside a text file.
        The Location namespace provides helper functions to work with
        [Location](#Location) literals.
      properties:
        range:
          $ref: '#/components/schemas/Range'
          title: range
        uri:
          $ref: '#/components/schemas/DocumentUri'
          title: uri
      x-propertyOrder:
      - uri
      - range
      required:
      - range
      - uri
      title: Location
      type: object
    LogMessageParams:
      defaultProperties: []
      description: The log message parameters.
      properties:
        message:
          description: The actual message
          title: message
          type: string
        type:
          $ref: '#/components/schemas/MessageType'
          description: The message type. See{@linkMessageType}
          title: type
      x-propertyOrder:
      - type
      - message
      required:
      - message
      - type
      title: LogMessageParams
      type: object
    MarkdownClientCapabilities:
      defaultProperties: []
      description: Client capabilities specific to the used markdown parser.
      properties:
        allowedTags:
          description: |-
            A list of HTML tags that the client allows / supports in
            Markdown.
          items:
            type: string
          title: allowedTags
          type: array
        parser:
          description: The name of the parser.
          title: parser
          type: string
        version:
          description: The version of the parser.
          title: version
          type: string
      x-propertyOrder:
      - parser
      - version
      - allowedTags
      required:
      - parser
      title: MarkdownClientCapabilities
      type: object
    MarkupContent:
      defaultProperties: []
      description: |-
        A `MarkupContent` literal represents a string value which content is interpreted base on its
        kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.

        If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
        See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting

        Here is an example how such a string can be constructed using JavaScript / TypeScript:
        ```ts
        let markdown: MarkdownContent = {
         kind: MarkupKind.Markdown,
         value: [
           '# Header',
           'Some text',
           '```typescript',
           'someCode();',
           '```'
         ].join('\n')
        };
        ```

        *Please Note* that clients might sanitize the return markdown. A client could decide to
        remove HTML from the markdown to avoid script execution.
      properties:
        kind:
          $ref: '#/components/schemas/MarkupKind'
          description: The type of the Markup
          title: kind
        value:
          description: The content itself
          title: value
          type: string
      x-propertyOrder:
      - kind
      - value
      required:
      - kind
      - value
      title: MarkupContent
      type: object
    MarkupKind:
      description: |-
        Describes the content type that a client supports in various
        result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

        Please note that `MarkupKinds` must not start with a `$`. This kinds
        are reserved for internal usage.
      enum:
      - markdown
      - plaintext
      title: MarkupKind
      type: string
    MessageActionItem:
      # additionalProperties:
      #   anyOf:
      #   - additionalProperties: true
      #     properties: {}
      #     type: object
      #   - anyOf:
      #       - type: string
      #         nullable: false
      #       - type: integer
      #         nullable: false
      #       - type: boolean
      #         nullable: false
      defaultProperties: []
      properties:
        title:
          description: A short title like 'Retry', 'Open Log' etc.
          title: title
          type: string
      x-propertyOrder:
      - title
      required:
      - title
      title: MessageActionItem
      type: object
    MessageType:
      description: The message type
      enum:
      - 1
      - 2
      - 3
      - 4
      title: MessageType
      type: number
    MonikerClientCapabilities:
      defaultProperties: []
      description: Client capabilities specific to the moniker request.
      properties:
        dynamicRegistration:
          description: |-
            Whether moniker supports dynamic registration. If this is set to `true`
            the client supports the new `MonikerRegistrationOptions` return value
            for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: MonikerClientCapabilities
      type: object
    MonikerOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: MonikerOptions
      type: object
    MonikerRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: MonikerRegistrationOptions
      type: object
    NotebookCellTextDocumentFilter:
      defaultProperties: []
      description: |-
        A notebook cell text document filter denotes a cell text
        document by different properties.
        The NotebookCellTextDocumentFilter namespace provides helper functions to work with
        [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
      properties:
        language:
          description: |-
            A language id like `python`.

            Will be matched against the language id of the
            notebook cell document. '*' matches every language.
          title: language
          type: string
        notebook:
          anyOf:
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - notebookType
            type: object
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - scheme
            type: object
          - defaultProperties: []
            properties:
              notebookType:
                description: The type of the enclosing notebook.
                title: notebookType
                type: string
              pattern:
                description: A glob pattern.
                title: pattern
                type: string
              scheme:
                description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                title: scheme
                type: string
            propertyOrder:
            - notebookType
            - scheme
            - pattern
            required:
            - pattern
            type: object
          - type: string
          description: |-
            A filter that matches against the notebook
            containing the notebook cell. If a string
            value is provided it matches against the
            notebook type. '*' matches every notebook.
          title: notebook
      propertyOrder:
      - notebook
      - language
      required:
      - notebook
      title: NotebookCellTextDocumentFilter
      type: object
    NotebookDocumentClientCapabilities:
      defaultProperties: []
      description: Capabilities specific to the notebook document support.
      properties:
        synchronization:
          $ref: '#/components/schemas/NotebookDocumentSyncClientCapabilities'
          description: Capabilities specific to notebook document synchronization
          title: synchronization
      x-propertyOrder:
      - synchronization
      required:
      - synchronization
      title: NotebookDocumentClientCapabilities
      type: object
    NotebookDocumentFilter:
      anyOf:
      - defaultProperties: []
        properties:
          notebookType:
            description: The type of the enclosing notebook.
            title: notebookType
            type: string
          pattern:
            description: A glob pattern.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - notebookType
        - scheme
        - pattern
        required:
        - notebookType
        type: object
      - defaultProperties: []
        properties:
          notebookType:
            description: The type of the enclosing notebook.
            title: notebookType
            type: string
          pattern:
            description: A glob pattern.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - notebookType
        - scheme
        - pattern
        required:
        - scheme
        type: object
      - defaultProperties: []
        properties:
          notebookType:
            description: The type of the enclosing notebook.
            title: notebookType
            type: string
          pattern:
            description: A glob pattern.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - notebookType
        - scheme
        - pattern
        required:
        - pattern
        type: object
      description: |-
        A notebook document filter denotes a notebook document by
        different properties. The properties will be match
        against the notebook's URI (same as with documents)
        The NotebookDocumentFilter namespace provides helper functions to work with
        [NotebookDocumentFilter](#NotebookDocumentFilter) literals.
    NotebookDocumentSyncClientCapabilities:
      defaultProperties: []
      description: Notebook specific client capabilities.
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is
            set to `true` the client supports the new
            `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
            return value for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
        executionSummarySupport:
          description: The client supports sending execution summary data per cell.
          title: executionSummarySupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - executionSummarySupport
      title: NotebookDocumentSyncClientCapabilities
      type: object
    NotebookDocumentSyncOptions:
      defaultProperties: []
      description: |-
        Options specific to a notebook plus its cells
        to be synced to the server.

        If a selector provide a notebook document
        filter but no cell selector all cells of a
        matching notebook document will be synced.

        If a selector provides no notebook document
        filter but only a cell selector all notebook
        document that contain at least one matching
        cell will be synced.
      properties:
        notebookSelector:
          description: The notebooks to be synced
          items:
            anyOf:
            - defaultProperties: []
              properties:
                cells:
                  description: The cells of the matching notebook to be synced.
                  items:
                    defaultProperties: []
                    properties:
                      language:
                        title: language
                        type: string
                    x-propertyOrder:
                    - language
                    required:
                    - language
                    type: object
                  title: cells
                  type: array
                notebook:
                  anyOf:
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - notebookType
                    type: object
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - scheme
                    type: object
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - pattern
                    type: object
                  - type: string
                  description: |-
                    The notebook to be synced If a string
                     value is provided it matches against the
                      notebook type. '*' matches every notebook.
                  title: notebook
              x-propertyOrder:
              - notebook
              - cells
              required:
              - notebook
              type: object
            - defaultProperties: []
              properties:
                cells:
                  description: The cells of the matching notebook to be synced.
                  items:
                    defaultProperties: []
                    properties:
                      language:
                        title: language
                        type: string
                    x-propertyOrder:
                    - language
                    required:
                    - language
                    type: object
                  title: cells
                  type: array
                notebook:
                  anyOf:
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - notebookType
                    type: object
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - scheme
                    type: object
                  - defaultProperties: []
                    properties:
                      notebookType:
                        description: The type of the enclosing notebook.
                        title: notebookType
                        type: string
                      pattern:
                        description: A glob pattern.
                        title: pattern
                        type: string
                      scheme:
                        description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                        title: scheme
                        type: string
                    x-propertyOrder:
                    - notebookType
                    - scheme
                    - pattern
                    required:
                    - pattern
                    type: object
                  - type: string
                  description: |-
                    The notebook to be synced If a string
                     value is provided it matches against the
                      notebook type. '*' matches every notebook.
                  title: notebook
              x-propertyOrder:
              - notebook
              - cells
              required:
              - cells
              type: object
          title: notebookSelector
          type: array
        save:
          description: |-
            Whether save notification should be forwarded to
            the server. Will only be honored if mode === `notebook`.
          title: save
          type: boolean
      x-propertyOrder:
      - notebookSelector
      - save
      required:
      - notebookSelector
      title: NotebookDocumentSyncOptions
      type: object
    NotebookDocumentSyncRegistrationOptions:
      allOf:
      - defaultProperties: []
        description: |-
          Options specific to a notebook plus its cells
          to be synced to the server.

          If a selector provide a notebook document
          filter but no cell selector all cells of a
          matching notebook document will be synced.

          If a selector provides no notebook document
          filter but only a cell selector all notebook
          document that contain at least one matching
          cell will be synced.
        properties:
          notebookSelector:
            description: The notebooks to be synced
            items:
              anyOf:
              - defaultProperties: []
                properties:
                  cells:
                    description: The cells of the matching notebook to be synced.
                    items:
                      defaultProperties: []
                      properties:
                        language:
                          title: language
                          type: string
                      x-propertyOrder:
                      - language
                      required:
                      - language
                      type: object
                    title: cells
                    type: array
                  notebook:
                    anyOf:
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - notebookType
                      type: object
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - scheme
                      type: object
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - pattern
                      type: object
                    - type: string
                    description: |-
                      The notebook to be synced If a string
                       value is provided it matches against the
                        notebook type. '*' matches every notebook.
                    title: notebook
                x-propertyOrder:
                - notebook
                - cells
                required:
                - notebook
                type: object
              - defaultProperties: []
                properties:
                  cells:
                    description: The cells of the matching notebook to be synced.
                    items:
                      defaultProperties: []
                      properties:
                        language:
                          title: language
                          type: string
                      x-propertyOrder:
                      - language
                      required:
                      - language
                      type: object
                    title: cells
                    type: array
                  notebook:
                    anyOf:
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - notebookType
                      type: object
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - scheme
                      type: object
                    - defaultProperties: []
                      properties:
                        notebookType:
                          description: The type of the enclosing notebook.
                          title: notebookType
                          type: string
                        pattern:
                          description: A glob pattern.
                          title: pattern
                          type: string
                        scheme:
                          description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                          title: scheme
                          type: string
                      x-propertyOrder:
                      - notebookType
                      - scheme
                      - pattern
                      required:
                      - pattern
                      type: object
                    - type: string
                    description: |-
                      The notebook to be synced If a string
                       value is provided it matches against the
                        notebook type. '*' matches every notebook.
                    title: notebook
                x-propertyOrder:
                - notebook
                - cells
                required:
                - cells
                type: object
            title: notebookSelector
            type: array
          save:
            description: |-
              Whether save notification should be forwarded to
              the server. Will only be honored if mode === `notebook`.
            title: save
            type: boolean
        x-propertyOrder:
        - notebookSelector
        - save
        required:
        - notebookSelector
        type: object
      - $ref: '#/components/schemas/StaticRegistrationOptions'
      description: Registration options specific to a notebook.
      title: NotebookDocumentSyncRegistrationOptions
    OptionalVersionedTextDocumentIdentifier:
      defaultProperties: []
      description: |-
        A text document identifier to optionally denote a specific version of a text document.
        The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
        [OptionalVersionedTextDocumentIdentifier](#OptionalVersionedTextDocumentIdentifier) literals.
      properties:
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The text document's uri.
          title: uri
        version:
          description: |-
            The version number of this document. If a versioned text document identifier
            is sent from the server to the client and the file is not open in the editor
            (the server has not received an open notification before) the server can send
            `null` to indicate that the version is unknown and the content on disk is the
            truth (as specified with document content ownership).
          title: version
          type: integer
      x-propertyOrder:
      - version
      - uri
      required:
      - uri
      - version
      title: OptionalVersionedTextDocumentIdentifier
      type: object
    ParameterInformation:
      defaultProperties: []
      description: |-
        Represents a parameter of a callable-signature. A parameter can
        have a label and a doc-comment.
        The ParameterInformation namespace provides helper functions to work with
        [ParameterInformation](#ParameterInformation) literals.
      properties:
        documentation:
          anyOf:
          - $ref: '#/components/schemas/MarkupContent'
          - type: string
          description: |-
            The human-readable doc-comment of this signature. Will be shown
            in the UI but can be omitted.
          title: documentation
        label:
          anyOf:
          - items:
              type: integer
            maxItems: 2
            minItems: 2
            type: array
          - type: string
          description: |-
            The label of this parameter information.

            Either a string or an inclusive start and exclusive end offsets within its containing
            signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
            string representation as `Position` and `Range` does.

            *Note*: a label of type string should be a substring of its containing signature label.
            Its intended use case is to highlight the parameter label part in the `SignatureInformation.label`.
          title: label
      x-propertyOrder:
      - label
      - documentation
      required:
      - label
      title: ParameterInformation
      type: object
    PartialResultParams:
      defaultProperties: []
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
      x-propertyOrder:
      - partialResultToken
      title: PartialResultParams
      type: object
    Pattern:
      description: |-
        The glob pattern to watch relative to the base path. Glob patterns can have the following syntax:
        - `*` to match one or more characters in a path segment
        - `?` to match on one character in a path segment
        - `**` to match any number of path segments, including none
        - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
        - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
        - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
      title: Pattern
      type: string
    Position:
      defaultProperties: []
      description: "Position in a text document expressed as zero-based line and character\noffset.
        Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation.
        So a string of the form `a\U00010400b` the character offset of the\ncharacter
        `a` is 0, the character offset of `\U00010400` is 1 and the character\noffset
        of b is 3 since `\U00010400` is represented using two code units in UTF-16.\nSince
        3.17 clients and servers can agree on a different string encoding\nrepresentation
        (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability
        [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of
        position encodings the client supports, with\ndecreasing preference (e.g. the
        encoding at index `0` is the most preferred\none). To stay backwards compatible
        the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`.
        The server can pick one of the\nencodings offered by the client and signals
        that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities).
        If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers
        can safely assume that the client supports UTF-16. If the server\nomits the
        position encoding in its initialize result the encoding defaults\nto the string
        value `utf-16`. Implementation considerations: since the\nconversion from one
        encoding into another requires the content of the\nfile / line the conversion
        is best done where the file is read which is\nusually on the server side.\n\nPositions
        are line end character agnostic. So you can not specify a position\nthat denotes
        `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position
        namespace provides helper functions to work with\n[Position](#Position) literals."
      properties:
        character:
          $ref: '#/components/schemas/uinteger'
          description: |-
            Character offset on a line in a document (zero-based). Assuming that the line is
            represented as a string, the `character` value represents the gap between the
            `character` and `character + 1`.

            If the character value is greater than the line length it defaults back to the
            line length.
          title: character
        line:
          $ref: '#/components/schemas/uinteger'
          description: Line position in a document (zero-based).
          title: line
      x-propertyOrder:
      - line
      - character
      required:
      - character
      - line
      title: Position
      type: object
    PositionEncodingKind:
      description: |-
        A set of predefined position encoding kinds.
        A type indicating how positions are encoded,
        specifically what column offsets mean.
      title: PositionEncodingKind
      type: string
    PrepareRenameParams:
      defaultProperties: []
      properties:
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - position
      - workDoneToken
      required:
      - position
      - textDocument
      title: PrepareRenameParams
      type: object
    PrepareRenameResult:
      anyOf:
      - $ref: '#/components/schemas/Range'
      - defaultProperties: []
        properties:
          placeholder:
            title: placeholder
            type: string
          range:
            $ref: '#/components/schemas/Range'
            title: range
        x-propertyOrder:
        - range
        - placeholder
        required:
        - placeholder
        - range
        type: object
      - defaultProperties: []
        properties:
          defaultBehavior:
            title: defaultBehavior
            type: boolean
        x-propertyOrder:
        - defaultBehavior
        required:
        - defaultBehavior
        type: object
    PrepareSupportDefaultBehavior:
      enum:
      - 1
      title: PrepareSupportDefaultBehavior
      type: number
    ProgressToken:
      title: ProgressToken
      anyOf:
        - type: string
          nullable: false
        - type: integer
          nullable: false
    PublishDiagnosticsClientCapabilities:
      defaultProperties: []
      description: The publish diagnostic client capabilities.
      properties:
        codeDescriptionSupport:
          description: Client supports a codeDescription property
          title: codeDescriptionSupport
          type: boolean
        dataSupport:
          description: |-
            Whether code action supports the `data` property which is
            preserved between a `textDocument/publishDiagnostics` and
            `textDocument/codeAction` request.
          title: dataSupport
          type: boolean
        relatedInformation:
          description: Whether the clients accepts diagnostics with related information.
          title: relatedInformation
          type: boolean
        tagSupport:
          defaultProperties: []
          description: |-
            Client supports the tag property to provide meta data about a diagnostic.
            Clients supporting tags have to handle unknown tags gracefully.
          properties:
            valueSet:
              description: The tags supported by the client.
              items:
                description: The diagnostic tags.
                enum:
                - 1
                - 2
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          required:
          - valueSet
          title: tagSupport
          type: object
        versionSupport:
          description: |-
            Whether the client interprets the version property of the
            `textDocument/publishDiagnostics` notification`s parameter.
          title: versionSupport
          type: boolean
      x-propertyOrder:
      - relatedInformation
      - tagSupport
      - versionSupport
      - codeDescriptionSupport
      - dataSupport
      title: PublishDiagnosticsClientCapabilities
      type: object
    PublishDiagnosticsParams:
      defaultProperties: []
      description: The publish diagnostic notification's parameters.
      properties:
        diagnostics:
          description: An array of diagnostic information items.
          items:
            $ref: '#/components/schemas/Diagnostic'
          title: diagnostics
          type: array
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The URI for which diagnostic information is reported.
          title: uri
        version:
          $ref: '#/components/schemas/integer'
          description: Optional the version number of the document the diagnostics are
            published for.
          title: version
      x-propertyOrder:
      - uri
      - version
      - diagnostics
      required:
      - diagnostics
      - uri
      title: PublishDiagnosticsParams
      type: object
    Range:
      defaultProperties: []
      description: |-
        A range in a text document expressed as (zero-based) start and end positions.

        If you want to specify a range that contains a line including the line ending
        character(s) then use an end position denoting the start of the next line.
        For example:
        ```ts
        {
            start: { line: 5, character: 23 }
            end : { line 6, character : 0 }
        }
        ```
        The Range namespace provides helper functions to work with
        [Range](#Range) literals.
      properties:
        end:
          $ref: '#/components/schemas/Position'
          description: The range's end position.
          title: end
        start:
          $ref: '#/components/schemas/Position'
          description: The range's start position
          title: start
      x-propertyOrder:
      - start
      - end
      required:
      - end
      - start
      title: Range
      type: object
    ReferenceClientCapabilities:
      defaultProperties: []
      description: Client Capabilities for a [ReferencesRequest](#ReferencesRequest).
      properties:
        dynamicRegistration:
          description: Whether references supports dynamic registration.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: ReferenceClientCapabilities
      type: object
    ReferenceContext:
      defaultProperties: []
      description: |-
        Value-object that contains additional information when
        requesting references.
      properties:
        includeDeclaration:
          description: Include the declaration of the current symbol.
          title: includeDeclaration
          type: boolean
      x-propertyOrder:
      - includeDeclaration
      required:
      - includeDeclaration
      title: ReferenceContext
      type: object
    ReferenceOptions:
      defaultProperties: []
      description: Reference options.
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: ReferenceOptions
      type: object
    ReferenceParams:
      defaultProperties: []
      description: Parameters for a [ReferencesRequest](#ReferencesRequest).
      properties:
        context:
          $ref: '#/components/schemas/ReferenceContext'
          title: context
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - context
      - textDocument
      - position
      - workDoneToken
      - partialResultToken
      required:
      - context
      - position
      - textDocument
      title: ReferenceParams
      type: object
    ReferenceRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [ReferencesRequest](#ReferencesRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      required:
      - documentSelector
      title: ReferenceRegistrationOptions
      type: object
    Registration:
      defaultProperties: []
      description: General parameters to to register for an notification or to register
        a provider.
      properties:
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again.
          title: id
          type: string
        method:
          description: The method to register for.
          title: method
          type: string
        registerOptions:
          $ref: '#/components/schemas/LSPAny'
          description: Options necessary for the registration.
          title: registerOptions
      x-propertyOrder:
      - id
      - method
      - registerOptions
      required:
      - id
      - method
      title: Registration
      type: object
    RegistrationParams:
      defaultProperties: []
      properties:
        registrations:
          items:
            $ref: '#/components/schemas/Registration'
          title: registrations
          type: array
      x-propertyOrder:
      - registrations
      required:
      - registrations
      title: RegistrationParams
      type: object
    RegularExpressionsClientCapabilities:
      defaultProperties: []
      description: Client capabilities specific to regular expressions.
      properties:
        engine:
          description: The engine's name.
          title: engine
          type: string
        version:
          description: The engine's version.
          title: version
          type: string
      x-propertyOrder:
      - engine
      - version
      required:
      - engine
      title: RegularExpressionsClientCapabilities
      type: object
    RelativePattern:
      defaultProperties: []
      description: |-
        A relative pattern is a helper to construct glob patterns that are matched
        relatively to a base URI. The common value for a `baseUri` is a workspace
        folder root, but it can be another absolute URI as well.
      properties:
        baseUri:
          anyOf:
          - $ref: '#/components/schemas/WorkspaceFolder'
          - type: string
          description: |-
            A workspace folder or a base URI to which this pattern will be matched
            against relatively.
          title: baseUri
        pattern:
          $ref: '#/components/schemas/Pattern'
          description: The actual glob pattern;
          title: pattern
      x-propertyOrder:
      - baseUri
      - pattern
      required:
      - baseUri
      - pattern
      title: RelativePattern
      type: object
    RenameClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: Whether rename supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        honorsChangeAnnotations:
          description: |-
            Whether th client honors the change annotations in
            text edits and resource operations returned via the
            rename request's workspace edit by for example presenting
            the workspace edit in the user interface and asking
            for confirmation.
          title: honorsChangeAnnotations
          type: boolean
        prepareSupport:
          description: |-
            Client supports testing for validity of rename operations
            before execution.
          title: prepareSupport
          type: boolean
        prepareSupportDefaultBehavior:
          $ref: '#/components/schemas/PrepareSupportDefaultBehavior'
          description: |-
            Client supports the default behavior result.

            The value indicates the default behavior used by the
            client.
          title: prepareSupportDefaultBehavior
      x-propertyOrder:
      - dynamicRegistration
      - prepareSupport
      - prepareSupportDefaultBehavior
      - honorsChangeAnnotations
      title: RenameClientCapabilities
      type: object
    RenameFile:
      defaultProperties: []
      description: Rename file operation
      properties:
        annotationId:
          $ref: '#/components/schemas/ChangeAnnotationIdentifier'
          description: An optional annotation identifier describing the operation.
          title: annotationId
        kind:
          description: A rename
          enum:
          - rename
          title: kind
          type: string
        newUri:
          $ref: '#/components/schemas/DocumentUri'
          description: The new location.
          title: newUri
        oldUri:
          $ref: '#/components/schemas/DocumentUri'
          description: The old (existing) location.
          title: oldUri
        options:
          $ref: '#/components/schemas/RenameFileOptions'
          description: Rename options.
          title: options
      x-propertyOrder:
      - kind
      - oldUri
      - newUri
      - options
      - annotationId
      required:
      - kind
      - newUri
      - oldUri
      title: RenameFile
      type: object
    RenameFileOptions:
      defaultProperties: []
      description: Rename file options
      properties:
        ignoreIfExists:
          description: Ignores if target exists.
          title: ignoreIfExists
          type: boolean
        overwrite:
          description: Overwrite target if existing. Overwrite wins over `ignoreIfExists`
          title: overwrite
          type: boolean
      x-propertyOrder:
      - overwrite
      - ignoreIfExists
      title: RenameFileOptions
      type: object
    RenameOptions:
      defaultProperties: []
      description: Provider options for a [RenameRequest](#RenameRequest).
      properties:
        prepareProvider:
          description: Renames should be checked and tested before being executed.
          title: prepareProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - prepareProvider
      - workDoneProgress
      title: RenameOptions
      type: object
    RenameParams:
      defaultProperties: []
      description: The parameters of a [RenameRequest](#RenameRequest).
      properties:
        newName:
          description: |-
            The new name of the symbol. If the given name is not valid the
            request must return a [ResponseError](#ResponseError) with an
            appropriate message set.
          title: newName
          type: string
        position:
          $ref: '#/components/schemas/Position'
          description: The position at which this request was sent.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document to rename.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - textDocument
      - position
      - newName
      - workDoneToken
      required:
      - newName
      - position
      - textDocument
      title: RenameParams
      type: object
    RenameRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [RenameRequest](#RenameRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        prepareProvider:
          description: Renames should be checked and tested before being executed.
          title: prepareProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - prepareProvider
      - workDoneProgress
      required:
      - documentSelector
      title: RenameRegistrationOptions
      type: object
    ResourceOperationKind:
      description: The kind of resource operations supported by the client.
      enum:
      - create
      - delete
      - rename
      type: string
    SaveOptions:
      defaultProperties: []
      description: Save options.
      properties:
        includeText:
          description: The client is supposed to include the content on save.
          title: includeText
          type: boolean
      x-propertyOrder:
      - includeText
      title: SaveOptions
      type: object
    SelectionRangeClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration for selection range providers. If this is set to `true`
            the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server
            capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      title: SelectionRangeClientCapabilities
      type: object
    SelectionRangeOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: SelectionRangeOptions
      type: object
    SelectionRangeRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      - documentSelector
      - id
      required:
      - documentSelector
      title: SelectionRangeRegistrationOptions
      type: object
    SemanticTokensClientCapabilities:
      defaultProperties: []
      properties:
        augmentsSyntaxTokens:
          description: |-
            Whether the client uses semantic tokens to augment existing
            syntax tokens. If set to `true` client side created syntax
            tokens and semantic tokens are both used for colorization. If
            set to `false` the client only uses the returned semantic tokens
            for colorization.

            If the value is `undefined` then the client behavior is not
            specified.
          title: augmentsSyntaxTokens
          type: boolean
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
            return value for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
        formats:
          description: The token formats the clients supports.
          items:
            enum:
            - relative
            type: string
          title: formats
          type: array
        multilineTokenSupport:
          description: Whether the client supports tokens that can span multiple lines.
          title: multilineTokenSupport
          type: boolean
        overlappingTokenSupport:
          description: Whether the client supports tokens that can overlap each other.
          title: overlappingTokenSupport
          type: boolean
        requests:
          defaultProperties: []
          description: |-
            Which requests the client supports and might send to the server
            depending on the server's capability. Please note that clients might not
            show semantic tokens or degrade some of the user experience if a range
            or full request is advertised by the client but not provided by the
            server. If for example the client capability `requests.full` and
            `request.range` are both set to true but the server only provides a
            range provider the client might not render a minimap correctly or might
            even decide to not show any semantic tokens at all.
          properties:
            full:
              anyOf:
              - defaultProperties: []
                properties:
                  delta:
                    description: |-
                      The client will send the `textDocument/semanticTokens/full/delta` request if
                      the server provides a corresponding handler.
                    title: delta
                    type: boolean
                x-propertyOrder:
                - delta
                type: object
              - type: boolean
              description: |-
                The client will send the `textDocument/semanticTokens/full` request if
                the server provides a corresponding handler.
              title: full
            range:
              anyOf:
              - properties: {}
                type: object
              - type: boolean
              description: |-
                The client will send the `textDocument/semanticTokens/range` request if
                the server provides a corresponding handler.
              title: range
          x-propertyOrder:
          - range
          - full
          title: requests
          type: object
        serverCancelSupport:
          description: |-
            Whether the client allows the server to actively cancel a
            semantic token request, e.g. supports returning
            LSPErrorCodes.ServerCancelled. If a server does the client
            needs to retrigger the request.
          title: serverCancelSupport
          type: boolean
        tokenModifiers:
          description: The token modifiers that the client supports.
          items:
            type: string
          title: tokenModifiers
          type: array
        tokenTypes:
          description: The token types that the client supports.
          items:
            type: string
          title: tokenTypes
          type: array
      x-propertyOrder:
      - dynamicRegistration
      - requests
      - tokenTypes
      - tokenModifiers
      - formats
      - overlappingTokenSupport
      - multilineTokenSupport
      - serverCancelSupport
      - augmentsSyntaxTokens
      required:
      - formats
      - requests
      - tokenModifiers
      - tokenTypes
      title: SemanticTokensClientCapabilities
      type: object
    SemanticTokensLegend:
      defaultProperties: []
      properties:
        tokenModifiers:
          description: The token modifiers a server uses.
          items:
            type: string
          title: tokenModifiers
          type: array
        tokenTypes:
          description: The token types a server uses.
          items:
            type: string
          title: tokenTypes
          type: array
      x-propertyOrder:
      - tokenTypes
      - tokenModifiers
      required:
      - tokenModifiers
      - tokenTypes
      title: SemanticTokensLegend
      type: object
    SemanticTokensOptions:
      defaultProperties: []
      properties:
        full:
          anyOf:
          - defaultProperties: []
            properties:
              delta:
                description: The server supports deltas for full documents.
                title: delta
                type: boolean
            x-propertyOrder:
            - delta
            type: object
          - type: boolean
          description: Server supports providing semantic tokens for a full document.
          title: full
        legend:
          $ref: '#/components/schemas/SemanticTokensLegend'
          description: The legend used by the server
          title: legend
        range:
          anyOf:
          - properties: {}
            type: object
          - type: boolean
          description: |-
            Server supports providing semantic tokens for a specific range
            of a document.
          title: range
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - legend
      - range
      - full
      - workDoneProgress
      required:
      - legend
      title: SemanticTokensOptions
      type: object
    SemanticTokensRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        full:
          anyOf:
          - defaultProperties: []
            properties:
              delta:
                description: The server supports deltas for full documents.
                title: delta
                type: boolean
            x-propertyOrder:
            - delta
            type: object
          - type: boolean
          description: Server supports providing semantic tokens for a full document.
          title: full
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        legend:
          $ref: '#/components/schemas/SemanticTokensLegend'
          description: The legend used by the server
          title: legend
        range:
          anyOf:
          - properties: {}
            type: object
          - type: boolean
          description: |-
            Server supports providing semantic tokens for a specific range
            of a document.
          title: range
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - legend
      - range
      - full
      - workDoneProgress
      - id
      required:
      - documentSelector
      - legend
      title: SemanticTokensRegistrationOptions
      type: object
    SemanticTokensWorkspaceClientCapabilities:
      defaultProperties: []
      properties:
        refreshSupport:
          description: |-
            Whether the client implementation supports a refresh request sent from
            the server to the client.

            Note that this event is global and will force the client to refresh all
            semantic tokens currently shown. It should be used with absolute care
            and is useful for situation where a server for example detects a project
            wide change that requires such a calculation.
          title: refreshSupport
          type: boolean
      x-propertyOrder:
      - refreshSupport
      title: SemanticTokensWorkspaceClientCapabilities
      type: object
    ServerCapabilities:
      defaultProperties: []
      description: |-
        Defines the capabilities provided by a language
        server.
      properties:
        callHierarchyProvider:
          anyOf:
          - $ref: '#/components/schemas/CallHierarchyOptions'
          - $ref: '#/components/schemas/CallHierarchyRegistrationOptions'
          - type: boolean
          description: The server provides call hierarchy support.
          title: callHierarchyProvider
        codeActionProvider:
          anyOf:
          - $ref: '#/components/schemas/CodeActionOptions'
          - type: boolean
          description: |-
            The server provides code actions. CodeActionOptions may only be
            specified if the client states that it supports
            `codeActionLiteralSupport` in its initial `initialize` request.
          title: codeActionProvider
        codeLensProvider:
          $ref: '#/components/schemas/CodeLensOptions'
          description: The server provides code lens.
          title: codeLensProvider
        colorProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentColorOptions'
          - $ref: '#/components/schemas/DocumentColorRegistrationOptions'
          - type: boolean
          description: The server provides color provider support.
          title: colorProvider
        completionProvider:
          $ref: '#/components/schemas/CompletionOptions'
          description: The server provides completion support.
          title: completionProvider
        declarationProvider:
          anyOf:
          - $ref: '#/components/schemas/DeclarationOptions'
          - $ref: '#/components/schemas/DeclarationRegistrationOptions'
          - type: boolean
          description: The server provides Goto Declaration support.
          title: declarationProvider
        definitionProvider:
          anyOf:
          - $ref: '#/components/schemas/DefinitionOptions'
          - type: boolean
          description: The server provides goto definition support.
          title: definitionProvider
        diagnosticProvider:
          anyOf:
          - $ref: '#/components/schemas/DiagnosticOptions'
            description: Diagnostic options.
          - $ref: '#/components/schemas/DiagnosticRegistrationOptions'
            description: Diagnostic registration options.
          description: The server has support for pull model diagnostics.
          title: diagnosticProvider
        documentFormattingProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentFormattingOptions'
          - type: boolean
          description: The server provides document formatting.
          title: documentFormattingProvider
        documentHighlightProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentHighlightOptions'
          - type: boolean
          description: The server provides document highlight support.
          title: documentHighlightProvider
        documentLinkProvider:
          $ref: '#/components/schemas/DocumentLinkOptions'
          description: The server provides document link support.
          title: documentLinkProvider
        documentOnTypeFormattingProvider:
          $ref: '#/components/schemas/DocumentOnTypeFormattingOptions'
          description: The server provides document formatting on typing.
          title: documentOnTypeFormattingProvider
        documentRangeFormattingProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentRangeFormattingOptions'
          - type: boolean
          description: The server provides document range formatting.
          title: documentRangeFormattingProvider
        documentSymbolProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentSymbolOptions'
          - type: boolean
          description: The server provides document symbol support.
          title: documentSymbolProvider
        executeCommandProvider:
          $ref: '#/components/schemas/ExecuteCommandOptions'
          description: The server provides execute command support.
          title: executeCommandProvider
        experimental:
          $ref: '#/components/schemas/ServerCapabilities.T_1'
          description: Experimental server capabilities.
          title: experimental
        foldingRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/FoldingRangeOptions'
          - $ref: '#/components/schemas/FoldingRangeRegistrationOptions'
          - type: boolean
          description: The server provides folding provider support.
          title: foldingRangeProvider
        hoverProvider:
          anyOf:
          - $ref: '#/components/schemas/HoverOptions'
          - type: boolean
          description: The server provides hover support.
          title: hoverProvider
        implementationProvider:
          anyOf:
          - $ref: '#/components/schemas/ImplementationOptions'
          - $ref: '#/components/schemas/ImplementationRegistrationOptions'
          - type: boolean
          description: The server provides Goto Implementation support.
          title: implementationProvider
        inlayHintProvider:
          anyOf:
          - $ref: '#/components/schemas/InlayHintOptions'
            description: Inlay hint options used during static registration.
          - $ref: '#/components/schemas/InlayHintRegistrationOptions'
            description: Inlay hint options used during static or dynamic registration.
          - type: boolean
          description: The server provides inlay hints.
          title: inlayHintProvider
        inlineValueProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkDoneProgressOptions'
          - $ref: '#/components/schemas/InlineValueRegistrationOptions'
            description: Inline value options used during static or dynamic registration.
          - type: boolean
          description: The server provides inline values.
          title: inlineValueProvider
        linkedEditingRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/LinkedEditingRangeOptions'
          - $ref: '#/components/schemas/LinkedEditingRangeRegistrationOptions'
          - type: boolean
          description: The server provides linked editing range support.
          title: linkedEditingRangeProvider
        monikerProvider:
          anyOf:
          - $ref: '#/components/schemas/MonikerOptions'
          - $ref: '#/components/schemas/MonikerRegistrationOptions'
          - type: boolean
          description: The server provides moniker support.
          title: monikerProvider
        notebookDocumentSync:
          anyOf:
          - $ref: '#/components/schemas/NotebookDocumentSyncOptions'
            description: |-
              Options specific to a notebook plus its cells
              to be synced to the server.

              If a selector provide a notebook document
              filter but no cell selector all cells of a
              matching notebook document will be synced.

              If a selector provides no notebook document
              filter but only a cell selector all notebook
              document that contain at least one matching
              cell will be synced.
          - $ref: '#/components/schemas/NotebookDocumentSyncRegistrationOptions'
            description: Registration options specific to a notebook.
          description: Defines how notebook documents are synced.
          title: notebookDocumentSync
        positionEncoding:
          $ref: '#/components/schemas/PositionEncodingKind'
          description: |-
            The position encoding the server picked from the encodings offered
            by the client via the client capability `general.positionEncodings`.

            If the client didn't provide any position encodings the only valid
            value that a server can return is 'utf-16'.

            If omitted it defaults to 'utf-16'.

            If for some reason
          title: positionEncoding
        referencesProvider:
          anyOf:
          - $ref: '#/components/schemas/ReferenceOptions'
          - type: boolean
          description: The server provides find references support.
          title: referencesProvider
        renameProvider:
          anyOf:
          - $ref: '#/components/schemas/RenameOptions'
          - type: boolean
          description: |-
            The server provides rename support. RenameOptions may only be
            specified if the client states that it supports
            `prepareSupport` in its initial `initialize` request.
          title: renameProvider
        selectionRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/SelectionRangeOptions'
          - $ref: '#/components/schemas/SelectionRangeRegistrationOptions'
          - type: boolean
          description: The server provides selection range support.
          title: selectionRangeProvider
        semanticTokensProvider:
          anyOf:
          - $ref: '#/components/schemas/SemanticTokensOptions'
          - $ref: '#/components/schemas/SemanticTokensRegistrationOptions'
          description: The server provides semantic tokens support.
          title: semanticTokensProvider
        signatureHelpProvider:
          $ref: '#/components/schemas/SignatureHelpOptions'
          description: The server provides signature help support.
          title: signatureHelpProvider
        textDocumentSync:
          anyOf:
          - $ref: '#/components/schemas/TextDocumentSyncOptions'
          - enum:
            - 0
            - 1
            - 2
            type: number
          description: |-
            Defines how text documents are synced. Is either a detailed structure
            defining each notification or for backwards compatibility the
            TextDocumentSyncKind number.
          title: textDocumentSync
        typeDefinitionProvider:
          anyOf:
          - $ref: '#/components/schemas/TypeDefinitionOptions'
          - $ref: '#/components/schemas/TypeDefinitionRegistrationOptions'
          - type: boolean
          description: The server provides Goto Type Definition support.
          title: typeDefinitionProvider
        typeHierarchyProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkDoneProgressOptions'
          - $ref: '#/components/schemas/TypeHierarchyRegistrationOptions'
            description: Type hierarchy options used during static or dynamic registration.
          - type: boolean
          description: The server provides type hierarchy support.
          title: typeHierarchyProvider
        workspace:
          defaultProperties: []
          description: Workspace specific server capabilities.
          properties:
            fileOperations:
              $ref: '#/components/schemas/FileOperationOptions'
              description: The server is interested in notifications/requests for operations
                on files.
              title: fileOperations
            workspaceFolders:
              $ref: '#/components/schemas/WorkspaceFoldersServerCapabilities'
              description: The server supports workspace folder.
              title: workspaceFolders
          x-propertyOrder:
          - workspaceFolders
          - fileOperations
          title: workspace
          type: object
        workspaceSymbolProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkspaceSymbolOptions'
          - type: boolean
          description: The server provides workspace symbol support.
          title: workspaceSymbolProvider
      x-propertyOrder:
      - positionEncoding
      - textDocumentSync
      - notebookDocumentSync
      - completionProvider
      - hoverProvider
      - signatureHelpProvider
      - declarationProvider
      - definitionProvider
      - typeDefinitionProvider
      - implementationProvider
      - referencesProvider
      - documentHighlightProvider
      - documentSymbolProvider
      - codeActionProvider
      - codeLensProvider
      - documentLinkProvider
      - colorProvider
      - workspaceSymbolProvider
      - documentFormattingProvider
      - documentRangeFormattingProvider
      - documentOnTypeFormattingProvider
      - renameProvider
      - foldingRangeProvider
      - selectionRangeProvider
      - executeCommandProvider
      - callHierarchyProvider
      - linkedEditingRangeProvider
      - semanticTokensProvider
      - monikerProvider
      - typeHierarchyProvider
      - inlineValueProvider
      - inlayHintProvider
      - diagnosticProvider
      - workspace
      - experimental
      title: ServerCapabilities
      type: object
    ServerCapabilities.T:
      defaultProperties: []
      x-propertyOrder: []
      title: ServerCapabilities.T
      type: object
    ServerCapabilities.T_1:
      $ref: '#/components/schemas/InitializeResult.T'
    ServerCapabilities<T>:
      defaultProperties: []
      description: |-
        Defines the capabilities provided by a language
        server.
      properties:
        callHierarchyProvider:
          anyOf:
          - $ref: '#/components/schemas/CallHierarchyOptions'
          - $ref: '#/components/schemas/CallHierarchyRegistrationOptions'
          - type: boolean
          description: The server provides call hierarchy support.
          title: callHierarchyProvider
        codeActionProvider:
          anyOf:
          - $ref: '#/components/schemas/CodeActionOptions'
          - type: boolean
          description: |-
            The server provides code actions. CodeActionOptions may only be
            specified if the client states that it supports
            `codeActionLiteralSupport` in its initial `initialize` request.
          title: codeActionProvider
        codeLensProvider:
          $ref: '#/components/schemas/CodeLensOptions'
          description: The server provides code lens.
          title: codeLensProvider
        colorProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentColorOptions'
          - $ref: '#/components/schemas/DocumentColorRegistrationOptions'
          - type: boolean
          description: The server provides color provider support.
          title: colorProvider
        completionProvider:
          $ref: '#/components/schemas/CompletionOptions'
          description: The server provides completion support.
          title: completionProvider
        declarationProvider:
          anyOf:
          - $ref: '#/components/schemas/DeclarationOptions'
          - $ref: '#/components/schemas/DeclarationRegistrationOptions'
          - type: boolean
          description: The server provides Goto Declaration support.
          title: declarationProvider
        definitionProvider:
          anyOf:
          - $ref: '#/components/schemas/DefinitionOptions'
          - type: boolean
          description: The server provides goto definition support.
          title: definitionProvider
        diagnosticProvider:
          anyOf:
          - $ref: '#/components/schemas/DiagnosticOptions'
            description: Diagnostic options.
          - $ref: '#/components/schemas/DiagnosticRegistrationOptions'
            description: Diagnostic registration options.
          description: The server has support for pull model diagnostics.
          title: diagnosticProvider
        documentFormattingProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentFormattingOptions'
          - type: boolean
          description: The server provides document formatting.
          title: documentFormattingProvider
        documentHighlightProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentHighlightOptions'
          - type: boolean
          description: The server provides document highlight support.
          title: documentHighlightProvider
        documentLinkProvider:
          $ref: '#/components/schemas/DocumentLinkOptions'
          description: The server provides document link support.
          title: documentLinkProvider
        documentOnTypeFormattingProvider:
          $ref: '#/components/schemas/DocumentOnTypeFormattingOptions'
          description: The server provides document formatting on typing.
          title: documentOnTypeFormattingProvider
        documentRangeFormattingProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentRangeFormattingOptions'
          - type: boolean
          description: The server provides document range formatting.
          title: documentRangeFormattingProvider
        documentSymbolProvider:
          anyOf:
          - $ref: '#/components/schemas/DocumentSymbolOptions'
          - type: boolean
          description: The server provides document symbol support.
          title: documentSymbolProvider
        executeCommandProvider:
          $ref: '#/components/schemas/ExecuteCommandOptions'
          description: The server provides execute command support.
          title: executeCommandProvider
        experimental:
          $ref: '#/components/schemas/ServerCapabilities.T'
          description: Experimental server capabilities.
          title: experimental
        foldingRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/FoldingRangeOptions'
          - $ref: '#/components/schemas/FoldingRangeRegistrationOptions'
          - type: boolean
          description: The server provides folding provider support.
          title: foldingRangeProvider
        hoverProvider:
          anyOf:
          - $ref: '#/components/schemas/HoverOptions'
          - type: boolean
          description: The server provides hover support.
          title: hoverProvider
        implementationProvider:
          anyOf:
          - $ref: '#/components/schemas/ImplementationOptions'
          - $ref: '#/components/schemas/ImplementationRegistrationOptions'
          - type: boolean
          description: The server provides Goto Implementation support.
          title: implementationProvider
        inlayHintProvider:
          anyOf:
          - $ref: '#/components/schemas/InlayHintOptions'
            description: Inlay hint options used during static registration.
          - $ref: '#/components/schemas/InlayHintRegistrationOptions'
            description: Inlay hint options used during static or dynamic registration.
          - type: boolean
          description: The server provides inlay hints.
          title: inlayHintProvider
        inlineValueProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkDoneProgressOptions'
          - $ref: '#/components/schemas/InlineValueRegistrationOptions'
            description: Inline value options used during static or dynamic registration.
          - type: boolean
          description: The server provides inline values.
          title: inlineValueProvider
        linkedEditingRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/LinkedEditingRangeOptions'
          - $ref: '#/components/schemas/LinkedEditingRangeRegistrationOptions'
          - type: boolean
          description: The server provides linked editing range support.
          title: linkedEditingRangeProvider
        monikerProvider:
          anyOf:
          - $ref: '#/components/schemas/MonikerOptions'
          - $ref: '#/components/schemas/MonikerRegistrationOptions'
          - type: boolean
          description: The server provides moniker support.
          title: monikerProvider
        notebookDocumentSync:
          anyOf:
          - $ref: '#/components/schemas/NotebookDocumentSyncOptions'
            description: |-
              Options specific to a notebook plus its cells
              to be synced to the server.

              If a selector provide a notebook document
              filter but no cell selector all cells of a
              matching notebook document will be synced.

              If a selector provides no notebook document
              filter but only a cell selector all notebook
              document that contain at least one matching
              cell will be synced.
          - $ref: '#/components/schemas/NotebookDocumentSyncRegistrationOptions'
            description: Registration options specific to a notebook.
          description: Defines how notebook documents are synced.
          title: notebookDocumentSync
        positionEncoding:
          $ref: '#/components/schemas/PositionEncodingKind'
          description: |-
            The position encoding the server picked from the encodings offered
            by the client via the client capability `general.positionEncodings`.

            If the client didn't provide any position encodings the only valid
            value that a server can return is 'utf-16'.

            If omitted it defaults to 'utf-16'.

            If for some reason
          title: positionEncoding
        referencesProvider:
          anyOf:
          - $ref: '#/components/schemas/ReferenceOptions'
          - type: boolean
          description: The server provides find references support.
          title: referencesProvider
        renameProvider:
          anyOf:
          - $ref: '#/components/schemas/RenameOptions'
          - type: boolean
          description: |-
            The server provides rename support. RenameOptions may only be
            specified if the client states that it supports
            `prepareSupport` in its initial `initialize` request.
          title: renameProvider
        selectionRangeProvider:
          anyOf:
          - $ref: '#/components/schemas/SelectionRangeOptions'
          - $ref: '#/components/schemas/SelectionRangeRegistrationOptions'
          - type: boolean
          description: The server provides selection range support.
          title: selectionRangeProvider
        semanticTokensProvider:
          anyOf:
          - $ref: '#/components/schemas/SemanticTokensOptions'
          - $ref: '#/components/schemas/SemanticTokensRegistrationOptions'
          description: The server provides semantic tokens support.
          title: semanticTokensProvider
        signatureHelpProvider:
          $ref: '#/components/schemas/SignatureHelpOptions'
          description: The server provides signature help support.
          title: signatureHelpProvider
        textDocumentSync:
          anyOf:
          - $ref: '#/components/schemas/TextDocumentSyncOptions'
          - enum:
            - 0
            - 1
            - 2
            type: number
          description: |-
            Defines how text documents are synced. Is either a detailed structure
            defining each notification or for backwards compatibility the
            TextDocumentSyncKind number.
          title: textDocumentSync
        typeDefinitionProvider:
          anyOf:
          - $ref: '#/components/schemas/TypeDefinitionOptions'
          - $ref: '#/components/schemas/TypeDefinitionRegistrationOptions'
          - type: boolean
          description: The server provides Goto Type Definition support.
          title: typeDefinitionProvider
        typeHierarchyProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkDoneProgressOptions'
          - $ref: '#/components/schemas/TypeHierarchyRegistrationOptions'
            description: Type hierarchy options used during static or dynamic registration.
          - type: boolean
          description: The server provides type hierarchy support.
          title: typeHierarchyProvider
        workspace:
          defaultProperties: []
          description: Workspace specific server capabilities.
          properties:
            fileOperations:
              $ref: '#/components/schemas/FileOperationOptions'
              description: The server is interested in notifications/requests for operations
                on files.
              title: fileOperations
            workspaceFolders:
              $ref: '#/components/schemas/WorkspaceFoldersServerCapabilities'
              description: The server supports workspace folder.
              title: workspaceFolders
          x-propertyOrder:
          - workspaceFolders
          - fileOperations
          title: workspace
          type: object
        workspaceSymbolProvider:
          anyOf:
          - $ref: '#/components/schemas/WorkspaceSymbolOptions'
          - type: boolean
          description: The server provides workspace symbol support.
          title: workspaceSymbolProvider
      x-propertyOrder:
      - positionEncoding
      - textDocumentSync
      - notebookDocumentSync
      - completionProvider
      - hoverProvider
      - signatureHelpProvider
      - declarationProvider
      - definitionProvider
      - typeDefinitionProvider
      - implementationProvider
      - referencesProvider
      - documentHighlightProvider
      - documentSymbolProvider
      - codeActionProvider
      - codeLensProvider
      - documentLinkProvider
      - colorProvider
      - workspaceSymbolProvider
      - documentFormattingProvider
      - documentRangeFormattingProvider
      - documentOnTypeFormattingProvider
      - renameProvider
      - foldingRangeProvider
      - selectionRangeProvider
      - executeCommandProvider
      - callHierarchyProvider
      - linkedEditingRangeProvider
      - semanticTokensProvider
      - monikerProvider
      - typeHierarchyProvider
      - inlineValueProvider
      - inlayHintProvider
      - diagnosticProvider
      - workspace
      - experimental
      title: ServerCapabilities<T>
      type: object
    ShowDocumentClientCapabilities:
      defaultProperties: []
      description: Client capabilities for the show document request.
      properties:
        support:
          description: |-
            The client has support for the show document
            request.
          title: support
          type: boolean
      x-propertyOrder:
      - support
      required:
      - support
      title: ShowDocumentClientCapabilities
      type: object
    ShowMessageParams:
      defaultProperties: []
      description: The parameters of a notification message.
      properties:
        message:
          description: The actual message
          title: message
          type: string
        type:
          $ref: '#/components/schemas/MessageType'
          description: The message type. See{@linkMessageType}
          title: type
      x-propertyOrder:
      - type
      - message
      required:
      - message
      - type
      title: ShowMessageParams
      type: object
    ShowMessageRequestClientCapabilities:
      defaultProperties: []
      description: Show message request client capabilities
      properties:
        messageActionItem:
          defaultProperties: []
          description: Capabilities specific to the `MessageActionItem` type.
          properties:
            additionalPropertiesSupport:
              description: |-
                Whether the client supports additional attributes which
                are preserved and send back to the server in the
                request's response.
              title: additionalPropertiesSupport
              type: boolean
          x-propertyOrder:
          - additionalPropertiesSupport
          title: messageActionItem
          type: object
      x-propertyOrder:
      - messageActionItem
      title: ShowMessageRequestClientCapabilities
      type: object
    ShowMessageRequestParams:
      defaultProperties: []
      properties:
        actions:
          description: The message action items to present.
          items:
            $ref: '#/components/schemas/MessageActionItem'
          title: actions
          type: array
        message:
          description: The actual message
          title: message
          type: string
        type:
          $ref: '#/components/schemas/MessageType'
          description: The message type. See{@linkMessageType}
          title: type
      x-propertyOrder:
      - type
      - message
      - actions
      required:
      - message
      - type
      title: ShowMessageRequestParams
      type: object
    SignatureHelp:
      defaultProperties: []
      description: |-
        Signature help represents the signature of something
        callable. There can be multiple signature but only one
        active and only one active parameter.
      properties:
        activeParameter:
          $ref: '#/components/schemas/uinteger'
          description: |-
            The active parameter of the active signature. If omitted or the value
            lies outside the range of `signatures[activeSignature].parameters`
            defaults to 0 if the active signature has parameters. If
            the active signature has no parameters it is ignored.
            In future version of the protocol this property might become
            mandatory to better express the active parameter if the
            active signature does have any.
          title: activeParameter
        activeSignature:
          $ref: '#/components/schemas/uinteger'
          description: |-
            The active signature. If omitted or the value lies outside the
            range of `signatures` the value defaults to zero or is ignored if
            the `SignatureHelp` has no signatures.

            Whenever possible implementors should make an active decision about
            the active signature and shouldn't rely on a default value.

            In future version of the protocol this property might become
            mandatory to better express this.
          title: activeSignature
        signatures:
          description: One or more signatures.
          items:
            $ref: '#/components/schemas/SignatureInformation'
          title: signatures
          type: array
      x-propertyOrder:
      - signatures
      - activeSignature
      - activeParameter
      required:
      - signatures
      title: SignatureHelp
      type: object
    SignatureHelpClientCapabilities:
      defaultProperties: []
      description: Client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).
      properties:
        contextSupport:
          description: |-
            The client supports to send additional context information for a
            `textDocument/signatureHelp` request. A client that opts into
            contextSupport will also support the `retriggerCharacters` on
            `SignatureHelpOptions`.
          title: contextSupport
          type: boolean
        dynamicRegistration:
          description: Whether signature help supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        signatureInformation:
          defaultProperties: []
          description: |-
            The client supports the following `SignatureInformation`
            specific properties.
          properties:
            activeParameterSupport:
              description: |-
                The client support the `activeParameter` property on `SignatureInformation`
                literal.
              title: activeParameterSupport
              type: boolean
            documentationFormat:
              description: |-
                Client supports the follow content formats for the documentation
                property. The order describes the preferred format of the client.
              items:
                description: |-
                  Describes the content type that a client supports in various
                  result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

                  Please note that `MarkupKinds` must not start with a `$`. This kinds
                  are reserved for internal usage.
                enum:
                - markdown
                - plaintext
                type: string
              title: documentationFormat
              type: array
            parameterInformation:
              defaultProperties: []
              description: Client capabilities specific to parameter information.
              properties:
                labelOffsetSupport:
                  description: |-
                    The client supports processing label offsets instead of a
                    simple label string.
                  title: labelOffsetSupport
                  type: boolean
              x-propertyOrder:
              - labelOffsetSupport
              title: parameterInformation
              type: object
          x-propertyOrder:
          - documentationFormat
          - parameterInformation
          - activeParameterSupport
          title: signatureInformation
          type: object
      x-propertyOrder:
      - dynamicRegistration
      - signatureInformation
      - contextSupport
      title: SignatureHelpClientCapabilities
      type: object
    SignatureHelpContext:
      defaultProperties: []
      description: Additional information about the context in which a signature help
        request was triggered.
      properties:
        activeSignatureHelp:
          $ref: '#/components/schemas/SignatureHelp'
          description: |-
            The currently active `SignatureHelp`.

            The `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on
            the user navigating through available signatures.
          title: activeSignatureHelp
        isRetrigger:
          description: |-
            `true` if signature help was already showing when it was triggered.

            Retrigger occurs when the signature help is already active and can be caused by actions such as
            typing a trigger character, a cursor move, or document content changes.
          title: isRetrigger
          type: boolean
        triggerCharacter:
          description: |-
            Character that caused signature help to be triggered.

            This is undefined when `triggerKind !== SignatureHelpTriggerKind.TriggerCharacter`
          title: triggerCharacter
          type: string
        triggerKind:
          $ref: '#/components/schemas/SignatureHelpTriggerKind'
          description: Action that caused signature help to be triggered.
          title: triggerKind
      x-propertyOrder:
      - triggerKind
      - triggerCharacter
      - isRetrigger
      - activeSignatureHelp
      required:
      - isRetrigger
      - triggerKind
      title: SignatureHelpContext
      type: object
    SignatureHelpOptions:
      defaultProperties: []
      description: Server Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).
      properties:
        retriggerCharacters:
          description: |-
            List of characters that re-trigger signature help.

            These trigger characters are only active when signature help is already showing. All trigger characters
            are also counted as re-trigger characters.
          items:
            type: string
          title: retriggerCharacters
          type: array
        triggerCharacters:
          description: List of characters that trigger signature help.
          items:
            type: string
          title: triggerCharacters
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - triggerCharacters
      - retriggerCharacters
      - workDoneProgress
      title: SignatureHelpOptions
      type: object
    SignatureHelpParams:
      defaultProperties: []
      description: Parameters for a [SignatureHelpRequest](#SignatureHelpRequest).
      properties:
        context:
          $ref: '#/components/schemas/SignatureHelpContext'
          description: |-
            The signature help context. This is only available if the client specifies
            to send this using the client capability `textDocument.signatureHelp.contextSupport === true`
          title: context
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - context
      - textDocument
      - position
      - workDoneToken
      required:
      - position
      - textDocument
      title: SignatureHelpParams
      type: object
    SignatureHelpRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [SignatureHelpRequest](#SignatureHelpRequest).
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        retriggerCharacters:
          description: |-
            List of characters that re-trigger signature help.

            These trigger characters are only active when signature help is already showing. All trigger characters
            are also counted as re-trigger characters.
          items:
            type: string
          title: retriggerCharacters
          type: array
        triggerCharacters:
          description: List of characters that trigger signature help.
          items:
            type: string
          title: triggerCharacters
          type: array
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - triggerCharacters
      - retriggerCharacters
      - workDoneProgress
      required:
      - documentSelector
      title: SignatureHelpRegistrationOptions
      type: object
    SignatureHelpTriggerKind:
      description: How a signature help was triggered.
      enum:
      - 1
      - 2
      - 3
      title: SignatureHelpTriggerKind
      type: number
    SignatureInformation:
      defaultProperties: []
      description: |-
        Represents the signature of something callable. A signature
        can have a label, like a function-name, a doc-comment, and
        a set of parameters.
        The SignatureInformation namespace provides helper functions to work with
        [SignatureInformation](#SignatureInformation) literals.
      properties:
        activeParameter:
          $ref: '#/components/schemas/uinteger'
          description: |-
            The index of the active parameter.

            If provided, this is used in place of `SignatureHelp.activeParameter`.
          title: activeParameter
        documentation:
          anyOf:
          - $ref: '#/components/schemas/MarkupContent'
          - type: string
          description: |-
            The human-readable doc-comment of this signature. Will be shown
            in the UI but can be omitted.
          title: documentation
        label:
          description: |-
            The label of this signature. Will be shown in
            the UI.
          title: label
          type: string
        parameters:
          description: The parameters of this signature.
          items:
            $ref: '#/components/schemas/ParameterInformation'
          title: parameters
          type: array
      x-propertyOrder:
      - label
      - documentation
      - parameters
      - activeParameter
      required:
      - label
      title: SignatureInformation
      type: object
    StaticRegistrationOptions:
      defaultProperties: []
      description: |-
        Static registration options to be returned in the initialize
        request.
        The StaticRegistrationOptions namespace provides helper functions to work with
        [StaticRegistrationOptions](#StaticRegistrationOptions) literals.
      properties:
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
      x-propertyOrder:
      - id
      title: StaticRegistrationOptions
      type: object
    TextDocumentChangeRegistrationOptions:
      defaultProperties: []
      description: Describe options to be used when registered for text document change
        events.
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        syncKind:
          $ref: '#/components/schemas/TextDocumentSyncKind'
          description: How documents are synced to the server.
          title: syncKind
      x-propertyOrder:
      - syncKind
      - documentSelector
      required:
      - documentSelector
      - syncKind
      title: TextDocumentChangeRegistrationOptions
      type: object
    TextDocumentClientCapabilities:
      defaultProperties: []
      description: Text document specific client capabilities.
      properties:
        callHierarchy:
          $ref: '#/components/schemas/CallHierarchyClientCapabilities'
          description: Capabilities specific to the various call hierarchy request.
          title: callHierarchy
        codeAction:
          $ref: '#/components/schemas/CodeActionClientCapabilities'
          description: Capabilities specific to the `textDocument/codeAction`
          title: codeAction
        codeLens:
          $ref: '#/components/schemas/CodeLensClientCapabilities'
          description: Capabilities specific to the `textDocument/codeLens`
          title: codeLens
        colorProvider:
          $ref: '#/components/schemas/DocumentColorClientCapabilities'
          description: Capabilities specific to the `textDocument/documentColor`
          title: colorProvider
        completion:
          $ref: '#/components/schemas/CompletionClientCapabilities'
          description: Capabilities specific to the `textDocument/completion`
          title: completion
        declaration:
          $ref: '#/components/schemas/DeclarationClientCapabilities'
          description: Capabilities specific to the `textDocument/declaration`
          title: declaration
        definition:
          $ref: '#/components/schemas/DefinitionClientCapabilities'
          description: Capabilities specific to the `textDocument/definition`
          title: definition
        diagnostic:
          $ref: '#/components/schemas/DiagnosticClientCapabilities'
          description: Capabilities specific to the diagnostic pull model.
          title: diagnostic
        documentHighlight:
          $ref: '#/components/schemas/DocumentHighlightClientCapabilities'
          description: Capabilities specific to the `textDocument/documentHighlight`
          title: documentHighlight
        documentLink:
          $ref: '#/components/schemas/DocumentLinkClientCapabilities'
          description: Capabilities specific to the `textDocument/documentLink`
          title: documentLink
        documentSymbol:
          $ref: '#/components/schemas/DocumentSymbolClientCapabilities'
          description: Capabilities specific to the `textDocument/documentSymbol`
          title: documentSymbol
        foldingRange:
          $ref: '#/components/schemas/FoldingRangeClientCapabilities'
          description: Capabilities specific to `textDocument/foldingRange` request.
          title: foldingRange
        formatting:
          $ref: '#/components/schemas/DocumentFormattingClientCapabilities'
          description: Capabilities specific to the `textDocument/formatting`
          title: formatting
        hover:
          $ref: '#/components/schemas/HoverClientCapabilities'
          description: Capabilities specific to the `textDocument/hover`
          title: hover
        implementation:
          $ref: '#/components/schemas/ImplementationClientCapabilities'
          description: Capabilities specific to the `textDocument/implementation`
          title: implementation
        inlayHint:
          $ref: '#/components/schemas/InlayHintClientCapabilities'
          description: Capabilities specific to the `textDocument/inlayHint` request.
          title: inlayHint
        inlineValue:
          $ref: '#/components/schemas/InlineValueClientCapabilities'
          description: Capabilities specific to the `textDocument/inlineValue` request.
          title: inlineValue
        linkedEditingRange:
          $ref: '#/components/schemas/LinkedEditingRangeClientCapabilities'
          description: Capabilities specific to the linked editing range request.
          title: linkedEditingRange
        moniker:
          $ref: '#/components/schemas/MonikerClientCapabilities'
          description: Client capabilities specific to the moniker request.
          title: moniker
        onTypeFormatting:
          $ref: '#/components/schemas/DocumentOnTypeFormattingClientCapabilities'
          description: Capabilities specific to the `textDocument/onTypeFormatting`
          title: onTypeFormatting
        publishDiagnostics:
          $ref: '#/components/schemas/PublishDiagnosticsClientCapabilities'
          description: Capabilities specific to `textDocument/publishDiagnostics` notification.
          title: publishDiagnostics
        rangeFormatting:
          $ref: '#/components/schemas/DocumentRangeFormattingClientCapabilities'
          description: Capabilities specific to the `textDocument/rangeFormatting`
          title: rangeFormatting
        references:
          $ref: '#/components/schemas/ReferenceClientCapabilities'
          description: Capabilities specific to the `textDocument/references`
          title: references
        rename:
          $ref: '#/components/schemas/RenameClientCapabilities'
          description: Capabilities specific to the `textDocument/rename`
          title: rename
        selectionRange:
          $ref: '#/components/schemas/SelectionRangeClientCapabilities'
          description: Capabilities specific to `textDocument/selectionRange` request.
          title: selectionRange
        semanticTokens:
          $ref: '#/components/schemas/SemanticTokensClientCapabilities'
          description: Capabilities specific to the various semantic token request.
          title: semanticTokens
        signatureHelp:
          $ref: '#/components/schemas/SignatureHelpClientCapabilities'
          description: Capabilities specific to the `textDocument/signatureHelp`
          title: signatureHelp
        synchronization:
          $ref: '#/components/schemas/TextDocumentSyncClientCapabilities'
          description: Defines which synchronization capabilities the client supports.
          title: synchronization
        typeDefinition:
          $ref: '#/components/schemas/TypeDefinitionClientCapabilities'
          description: Capabilities specific to the `textDocument/typeDefinition`
          title: typeDefinition
        typeHierarchy:
          $ref: '#/components/schemas/TypeHierarchyClientCapabilities'
          description: Capabilities specific to the various type hierarchy requests.
          title: typeHierarchy
      x-propertyOrder:
      - synchronization
      - completion
      - hover
      - signatureHelp
      - declaration
      - definition
      - typeDefinition
      - implementation
      - references
      - documentHighlight
      - documentSymbol
      - codeAction
      - codeLens
      - documentLink
      - colorProvider
      - formatting
      - rangeFormatting
      - onTypeFormatting
      - rename
      - foldingRange
      - selectionRange
      - publishDiagnostics
      - callHierarchy
      - semanticTokens
      - linkedEditingRange
      - moniker
      - typeHierarchy
      - inlineValue
      - inlayHint
      - diagnostic
      title: TextDocumentClientCapabilities
      type: object
    TextDocumentContentChangeEvent:
      anyOf:
      - defaultProperties: []
        properties:
          range:
            $ref: '#/components/schemas/Range'
            description: The range of the document that changed.
            title: range
          rangeLength:
            $ref: '#/components/schemas/uinteger'
            description: The optional length of the range that got replaced.
            title: rangeLength
          text:
            description: The new text for the provided range.
            title: text
            type: string
        x-propertyOrder:
        - range
        - rangeLength
        - text
        required:
        - range
        - text
        type: object
      - defaultProperties: []
        properties:
          text:
            description: The new text of the whole document.
            title: text
            type: string
        x-propertyOrder:
        - text
        required:
        - text
        type: object
      description: |-
        An event describing a change to a text document. If only a text is provided
        it is considered to be the full content of the document.
    TextDocumentEdit:
      defaultProperties: []
      description: |-
        Describes textual changes on a text document. A TextDocumentEdit describes all changes
        on a document version Si and after they are applied move the document to version Si+1.
        So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
        kind of ordering. However the edits must be non overlapping.
        The TextDocumentEdit namespace provides helper function to create
        an edit that manipulates a text document.
      properties:
        edits:
          description: The edits to be applied.
          items:
            anyOf:
            - $ref: '#/components/schemas/TextEdit'
            - $ref: '#/components/schemas/AnnotatedTextEdit'
          title: edits
          type: array
        textDocument:
          $ref: '#/components/schemas/OptionalVersionedTextDocumentIdentifier'
          description: The text document to change.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - edits
      required:
      - edits
      - textDocument
      title: TextDocumentEdit
      type: object
    TextDocumentFilter:
      anyOf:
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - language
        type: object
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - scheme
        type: object
      - defaultProperties: []
        properties:
          language:
            description: A language id, like `typescript`.
            title: language
            type: string
          pattern:
            description: A glob pattern, like `*.{ts,js}`.
            title: pattern
            type: string
          scheme:
            description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
            title: scheme
            type: string
        x-propertyOrder:
        - language
        - scheme
        - pattern
        required:
        - pattern
        type: object
      description: |-
        A document filter denotes a document by different properties like
        the [language](#TextDocument.languageId), the [scheme](#Uri.scheme) of
        its resource, or a glob-pattern that is applied to the [path](#TextDocument.fileName).

        Glob patterns can have the following syntax:
        - `*` to match one or more characters in a path segment
        - `?` to match on one character in a path segment
        - `**` to match any number of path segments, including none
        - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
        - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
        - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
        The TextDocumentFilter namespace provides helper functions to work with
        [TextDocumentFilter](#TextDocumentFilter) literals.
    TextDocumentIdentifier:
      defaultProperties: []
      description: |-
        A literal to identify a text document in the client.
        The TextDocumentIdentifier namespace provides helper functions to work with
        [TextDocumentIdentifier](#TextDocumentIdentifier) literals.
      properties:
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The text document's uri.
          title: uri
      x-propertyOrder:
      - uri
      required:
      - uri
      title: TextDocumentIdentifier
      type: object
    TextDocumentItem:
      defaultProperties: []
      description: |-
        An item to transfer a text document from the client to the
        server.
        The TextDocumentItem namespace provides helper functions to work with
        [TextDocumentItem](#TextDocumentItem) literals.
      properties:
        languageId:
          description: The text document's language identifier
          title: languageId
          type: string
        text:
          description: The content of the opened text document.
          title: text
          type: string
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The text document's uri.
          title: uri
        version:
          $ref: '#/components/schemas/integer'
          description: |-
            The version number of this document (it will increase after each
            change, including undo/redo).
          title: version
      x-propertyOrder:
      - uri
      - languageId
      - version
      - text
      required:
      - languageId
      - text
      - uri
      - version
      title: TextDocumentItem
      type: object
    TextDocumentPositionParams:
      defaultProperties: []
      description: |-
        A parameter literal used in requests to pass a text document and a position inside that
        document.
      properties:
        position:
          $ref: '#/components/schemas/Position'
          description: The position inside the text document.
          title: position
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The text document.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - position
      required:
      - position
      - textDocument
      title: TextDocumentPositionParams
      type: object
    TextDocumentRegistrationOptions:
      defaultProperties: []
      description: |-
        General text document registration options.
        The TextDocumentRegistrationOptions namespace provides helper functions to work with
        [TextDocumentRegistrationOptions](#TextDocumentRegistrationOptions) literals.
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
      x-propertyOrder:
      - documentSelector
      required:
      - documentSelector
      title: TextDocumentRegistrationOptions
      type: object
    TextDocumentSaveReason:
      description: Represents reasons why a text document is saved.
      enum:
      - 1
      - 2
      - 3
      title: TextDocumentSaveReason
      type: number
    TextDocumentSaveRegistrationOptions:
      defaultProperties: []
      description: Save registration options.
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        includeText:
          description: The client is supposed to include the content on save.
          title: includeText
          type: boolean
      x-propertyOrder:
      - documentSelector
      - includeText
      required:
      - documentSelector
      title: TextDocumentSaveRegistrationOptions
      type: object
    TextDocumentSyncClientCapabilities:
      defaultProperties: []
      properties:
        didSave:
          description: The client supports did save notifications.
          title: didSave
          type: boolean
        dynamicRegistration:
          description: Whether text document synchronization supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        willSave:
          description: The client supports sending will save notifications.
          title: willSave
          type: boolean
        willSaveWaitUntil:
          description: |-
            The client supports sending a will save request and
            waits for a response providing text edits which will
            be applied to the document before it is saved.
          title: willSaveWaitUntil
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - willSave
      - willSaveWaitUntil
      - didSave
      title: TextDocumentSyncClientCapabilities
      type: object
    TextDocumentSyncKind:
      description: |-
        Defines how the host (editor) should sync
        document changes to the language server.
      enum:
      - 0
      - 1
      - 2
      title: TextDocumentSyncKind
      type: number
    TextDocumentSyncOptions:
      defaultProperties: []
      properties:
        change:
          $ref: '#/components/schemas/TextDocumentSyncKind'
          description: |-
            Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full
            and TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None.
          title: change
        openClose:
          description: |-
            Open and close notifications are sent to the server. If omitted open close notification should not
            be sent.
          title: openClose
          type: boolean
        save:
          anyOf:
          - $ref: '#/components/schemas/SaveOptions'
          - type: boolean
          description: |-
            If present save notifications are sent to the server. If omitted the notification should not be
            sent.
          title: save
        willSave:
          description: |-
            If present will save notifications are sent to the server. If omitted the notification should not be
            sent.
          title: willSave
          type: boolean
        willSaveWaitUntil:
          description: |-
            If present will save wait until requests are sent to the server. If omitted the request should not be
            sent.
          title: willSaveWaitUntil
          type: boolean
      x-propertyOrder:
      - openClose
      - change
      - willSave
      - willSaveWaitUntil
      - save
      title: TextDocumentSyncOptions
      type: object
    TextEdit:
      defaultProperties: []
      description: |-
        A text edit applicable to a text document.
        The TextEdit namespace provides helper function to create replace,
        insert and delete edits more easily.
      properties:
        newText:
          description: |-
            The string to be inserted. For delete operations use an
            empty string.
          title: newText
          type: string
        range:
          $ref: '#/components/schemas/Range'
          description: |-
            The range of the text document to be manipulated. To insert
            text into a document create a range where start === end.
          title: range
      x-propertyOrder:
      - range
      - newText
      required:
      - newText
      - range
      title: TextEdit
      type: object
    TypeDefinitionClientCapabilities:
      defaultProperties: []
      description: Since 3.6.0
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `TypeDefinitionRegistrationOptions` return value
            for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
        linkSupport:
          description: |-
            The client supports additional metadata in the form of definition links.

            Since 3.14.0
          title: linkSupport
          type: boolean
      x-propertyOrder:
      - dynamicRegistration
      - linkSupport
      title: TypeDefinitionClientCapabilities
      type: object
    TypeDefinitionOptions:
      defaultProperties: []
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: TypeDefinitionOptions
      type: object
    TypeDefinitionRegistrationOptions:
      defaultProperties: []
      properties:
        documentSelector:
          description: |-
            A document selector to identify the scope of the registration. If set to null
            the document selector provided on the client side will be used.
          items:
            anyOf:
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - language
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - scheme
              type: object
            - defaultProperties: []
              properties:
                language:
                  description: A language id, like `typescript`.
                  title: language
                  type: string
                pattern:
                  description: A glob pattern, like `*.{ts,js}`.
                  title: pattern
                  type: string
                scheme:
                  description: A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
                  title: scheme
                  type: string
              x-propertyOrder:
              - language
              - scheme
              - pattern
              required:
              - pattern
              type: object
            - $ref: '#/components/schemas/NotebookCellTextDocumentFilter'
              description: |-
                A notebook cell text document filter denotes a cell text
                document by different properties.
                The NotebookCellTextDocumentFilter namespace provides helper functions to work with
                [NotebookCellTextDocumentFilter](#NotebookCellTextDocumentFilter) literals.
            - type: string
          title: documentSelector
          type: array
        id:
          description: |-
            The id used to register the request. The id can be used to deregister
            the request again. See also Registration#id.
          title: id
          type: string
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - documentSelector
      - workDoneProgress
      - id
      required:
      - documentSelector
      title: TypeDefinitionRegistrationOptions
      type: object
    TypeHierarchyClientCapabilities:
      defaultProperties: []
      properties:
        dynamicRegistration:
          description: |-
            Whether implementation supports dynamic registration. If this is set to `true`
            the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
            return value for the corresponding server capability as well.
          title: dynamicRegistration
          type: boolean
      x-propertyOrder:
        - dynamicRegistration
      title: TypeHierarchyClientCapabilities
      type: object
    TypeHierarchyRegistrationOptions:
      allOf:
      - $ref: '#/components/schemas/TextDocumentRegistrationOptions'
      - $ref: '#/components/schemas/WorkDoneProgressOptions'
      - $ref: '#/components/schemas/StaticRegistrationOptions'
      description: Type hierarchy options used during static or dynamic registration.
      title: TypeHierarchyRegistrationOptions
    URI:
      description: A tagging type for string properties that are actually URIs
      title: URI
      type: string
    Unregistration:
      defaultProperties: []
      description: General parameters to unregister a request or notification.
      properties:
        id:
          description: |-
            The id used to unregister the request or notification. Usually an id
            provided during the register request.
          title: id
          type: string
        method:
          description: The method to unregister for.
          title: method
          type: string
      x-propertyOrder:
      - id
      - method
      required:
      - id
      - method
      title: Unregistration
      type: object
    UnregistrationParams:
      defaultProperties: []
      properties:
        unregisterations:
          items:
            $ref: '#/components/schemas/Unregistration'
          title: unregisterations
          type: array
      x-propertyOrder:
      - unregisterations
      required:
      - unregisterations
      title: UnregistrationParams
      type: object
    VersionedTextDocumentIdentifier:
      defaultProperties: []
      description: |-
        A text document identifier to denote a specific version of a text document.
        The VersionedTextDocumentIdentifier namespace provides helper functions to work with
        [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.
      properties:
        uri:
          $ref: '#/components/schemas/DocumentUri'
          description: The text document's uri.
          title: uri
        version:
          $ref: '#/components/schemas/integer'
          description: The version number of this document.
          title: version
      x-propertyOrder:
      - version
      - uri
      required:
      - uri
      - version
      title: VersionedTextDocumentIdentifier
      type: object
    WatchKind:
      title: WatchKind
      type: integer
    WillSaveTextDocumentParams:
      defaultProperties: []
      description: The parameters send in a will save text document notification.
      properties:
        reason:
          $ref: '#/components/schemas/TextDocumentSaveReason'
          description: The 'TextDocumentSaveReason'.
          title: reason
        textDocument:
          $ref: '#/components/schemas/TextDocumentIdentifier'
          description: The document that will be saved.
          title: textDocument
      x-propertyOrder:
      - textDocument
      - reason
      required:
      - reason
      - textDocument
      title: WillSaveTextDocumentParams
      type: object
    WindowClientCapabilities:
      defaultProperties: []
      properties:
        showDocument:
          $ref: '#/components/schemas/ShowDocumentClientCapabilities'
          description: Capabilities specific to the showDocument request.
          title: showDocument
        showMessage:
          $ref: '#/components/schemas/ShowMessageRequestClientCapabilities'
          description: Capabilities specific to the showMessage request.
          title: showMessage
        workDoneProgress:
          description: |-
            It indicates whether the client supports server initiated
            progress using the `window/workDoneProgress/create` request.

            The capability also controls Whether client supports handling
            of progress notifications. If set servers are allowed to report a
            `workDoneProgress` property in the request specific server
            capabilities.
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      - showMessage
      - showDocument
      title: WindowClientCapabilities
      type: object
    WorkDoneProgressOptions:
      defaultProperties: []
      description: |-
        The WorkDoneProgressOptions namespace provides helper functions to work with
        [WorkDoneProgressOptions](#WorkDoneProgressOptions) literals.
      properties:
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - workDoneProgress
      title: WorkDoneProgressOptions
      type: object
    WorkDoneProgressParams:
      defaultProperties: []
      properties:
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - workDoneToken
      title: WorkDoneProgressParams
      type: object
    WorkspaceClientCapabilities:
      defaultProperties: []
      description: Workspace specific client capabilities.
      properties:
        applyEdit:
          description: |-
            The client supports applying batch edits
            to the workspace by supporting the request
            'workspace/applyEdit'
          title: applyEdit
          type: boolean
        codeLens:
          $ref: '#/components/schemas/CodeLensWorkspaceClientCapabilities'
          description: |-
            Capabilities specific to the code lens requests scoped to the
            workspace.
          title: codeLens
        configuration:
          description: The client supports `workspace/configuration` requests.
          title: configuration
          type: boolean
        diagnostics:
          $ref: '#/components/schemas/DiagnosticWorkspaceClientCapabilities'
          description: |-
            Capabilities specific to the diagnostic requests scoped to the
            workspace.
          title: diagnostics
        didChangeConfiguration:
          $ref: '#/components/schemas/DidChangeConfigurationClientCapabilities'
          description: Capabilities specific to the `workspace/didChangeConfiguration`
            notification.
          title: didChangeConfiguration
        didChangeWatchedFiles:
          $ref: '#/components/schemas/DidChangeWatchedFilesClientCapabilities'
          description: Capabilities specific to the `workspace/didChangeWatchedFiles`
            notification.
          title: didChangeWatchedFiles
        executeCommand:
          $ref: '#/components/schemas/ExecuteCommandClientCapabilities'
          description: Capabilities specific to the `workspace/executeCommand` request.
          title: executeCommand
        fileOperations:
          $ref: '#/components/schemas/FileOperationClientCapabilities'
          description: |-
            The client has support for file notifications/requests for user operations on files.

            Since 3.16.0
          title: fileOperations
        inlayHint:
          $ref: '#/components/schemas/InlayHintWorkspaceClientCapabilities'
          description: |-
            Capabilities specific to the inlay hints requests scoped to the
            workspace.
          title: inlayHint
        inlineValue:
          $ref: '#/components/schemas/InlineValueWorkspaceClientCapabilities'
          description: |-
            Capabilities specific to the inline values requests scoped to the
            workspace.
          title: inlineValue
        semanticTokens:
          $ref: '#/components/schemas/SemanticTokensWorkspaceClientCapabilities'
          description: |-
            Capabilities specific to the semantic token requests scoped to the
            workspace.
          title: semanticTokens
        symbol:
          $ref: '#/components/schemas/WorkspaceSymbolClientCapabilities'
          description: Capabilities specific to the `workspace/symbol` request.
          title: symbol
        workspaceEdit:
          $ref: '#/components/schemas/WorkspaceEditClientCapabilities'
          description: Capabilities specific to `WorkspaceEdit`s
          title: workspaceEdit
        workspaceFolders:
          description: The client has support for workspace folders
          title: workspaceFolders
          type: boolean
      x-propertyOrder:
      - applyEdit
      - workspaceEdit
      - didChangeConfiguration
      - didChangeWatchedFiles
      - symbol
      - executeCommand
      - workspaceFolders
      - configuration
      - semanticTokens
      - codeLens
      - fileOperations
      - inlineValue
      - inlayHint
      - diagnostics
      title: WorkspaceClientCapabilities
      type: object
    WorkspaceEdit:
      defaultProperties: []
      description: |-
        A workspace edit represents changes to many resources managed in the workspace. The edit
        should either provide `changes` or `documentChanges`. If documentChanges are present
        they are preferred over `changes` if the client can handle versioned document edits.

        Since version 3.13.0 a workspace edit can contain resource operations as well. If resource
        operations are present clients need to execute the operations in the order in which they
        are provided. So a workspace edit for example can consist of the following two changes:
        (1) a create file a.txt and (2) a text document edit which insert text into file a.txt.

        An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will
        cause failure of the operation. How the client recovers from the failure is described by
        the client capability: `workspace.workspaceEdit.failureHandling`
      properties:
        changeAnnotations:
          additionalProperties:
            $ref: '#/components/schemas/ChangeAnnotation'
          defaultProperties: []
          description: |-
            A map of change annotations that can be referenced in `AnnotatedTextEdit`s or create, rename and
            delete file / folder operations.

            Whether clients honor this property depends on the client capability `workspace.changeAnnotationSupport`.
          x-propertyOrder: []
          title: changeAnnotations
          type: object
        changes:
          additionalProperties:
            items:
              $ref: '#/components/schemas/TextEdit'
            type: array
          defaultProperties: []
          description: Holds changes to existing resources.
          x-propertyOrder: []
          title: changes
          type: object
        documentChanges:
          description: |-
            Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes
            are either an array of `TextDocumentEdit`s to express changes to n different text documents
            where each text document edit addresses a specific version of a text document. Or it can contain
            above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.

            Whether a client supports versioned document edits is expressed via
            `workspace.workspaceEdit.documentChanges` client capability.

            If a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then
            only plain `TextEdit`s using the `changes` property are supported.
          items:
            anyOf:
            - $ref: '#/components/schemas/TextDocumentEdit'
            - $ref: '#/components/schemas/CreateFile'
            - $ref: '#/components/schemas/RenameFile'
            - $ref: '#/components/schemas/DeleteFile'
          title: documentChanges
          type: array
      x-propertyOrder:
      - changes
      - documentChanges
      - changeAnnotations
      title: WorkspaceEdit
      type: object
    WorkspaceEditClientCapabilities:
      defaultProperties: []
      properties:
        changeAnnotationSupport:
          defaultProperties: []
          description: |-
            Whether the client in general supports change annotations on text edits,
            create file, rename file and delete file changes.
          properties:
            groupsOnLabel:
              description: |-
                Whether the client groups edits with equal labels into tree nodes,
                for instance all edits labelled with "Changes in Strings" would
                be a tree node.
              title: groupsOnLabel
              type: boolean
          x-propertyOrder:
          - groupsOnLabel
          title: changeAnnotationSupport
          type: object
        documentChanges:
          description: The client supports versioned document changes in `WorkspaceEdit`s
          title: documentChanges
          type: boolean
        failureHandling:
          $ref: '#/components/schemas/FailureHandlingKind'
          description: |-
            The failure handling strategy of a client if applying the workspace edit
            fails.
          title: failureHandling
        normalizesLineEndings:
          description: |-
            Whether the client normalizes line endings to the client specific
            setting.
            If set to `true` the client will normalize line ending characters
            in a workspace edit containing to the client specific new line
            character.
          title: normalizesLineEndings
          type: boolean
        resourceOperations:
          description: |-
            The resource operations the client supports. Clients should at least
            support 'create', 'rename' and 'delete' files and folders.
          items:
            description: The kind of resource operations supported by the client.
            enum:
            - create
            - delete
            - rename
            type: string
          title: resourceOperations
          type: array
      x-propertyOrder:
      - documentChanges
      - resourceOperations
      - failureHandling
      - normalizesLineEndings
      - changeAnnotationSupport
      title: WorkspaceEditClientCapabilities
      type: object
    WorkspaceFolder:
      defaultProperties: []
      description: A workspace folder inside a client.
      properties:
        name:
          description: |-
            The name of the workspace folder. Used to refer to this
            workspace folder in the user interface.
          title: name
          type: string
        uri:
          $ref: '#/components/schemas/URI'
          description: The associated URI for this workspace folder.
          title: uri
      x-propertyOrder:
      - uri
      - name
      required:
      - name
      - uri
      title: WorkspaceFolder
      type: object
    WorkspaceFoldersInitializeParams:
      defaultProperties: []
      properties:
        workspaceFolders:
          description: The actual configured workspace folders.
          items:
            $ref: '#/components/schemas/WorkspaceFolder'
          title: workspaceFolders
          type: array
      x-propertyOrder:
      - workspaceFolders
      required:
      - workspaceFolders
      title: WorkspaceFoldersInitializeParams
      type: object
    WorkspaceFoldersServerCapabilities:
      defaultProperties: []
      properties:
        changeNotifications:
          description: |-
            Whether the server wants to receive workspace folder
            change notifications.

            If a strings is provided the string is treated as a ID
            under which the notification is registered on the client
            side. The ID can be used to unregister for these events
            using the `client/unregisterCapability` request.
          title: changeNotifications
          anyOf:
          - type: string
          - type: boolean
        supported:
          description: The Server has support for workspace folders
          title: supported
          type: boolean
      x-propertyOrder:
      - supported
      - changeNotifications
      title: WorkspaceFoldersServerCapabilities
      type: object
    WorkspaceSymbolClientCapabilities:
      defaultProperties: []
      description: Client capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
      properties:
        dynamicRegistration:
          description: Symbol request supports dynamic registration.
          title: dynamicRegistration
          type: boolean
        resolveSupport:
          defaultProperties: []
          description: |-
            The client support partial workspace symbols. The client will send the
            request `workspaceSymbol/resolve` to the server to resolve additional
            properties.
          properties:
            properties:
              description: |-
                The properties that a client can resolve lazily. Usually
                `location.range`
              items:
                type: string
              title: properties
              type: array
          x-propertyOrder:
          - properties
          required:
          - properties
          title: resolveSupport
          type: object
        symbolKind:
          defaultProperties: []
          description: Specific capabilities for the `SymbolKind` in the `workspace/symbol`
            request.
          properties:
            valueSet:
              description: |-
                The symbol kind values the client supports. When this
                property exists the client also guarantees that it will
                handle values outside its set gracefully and falls back
                to a default value when unknown.

                If this property is not present the client only supports
                the symbol kinds from `File` to `Array` as defined in
                the initial version of the protocol.
              items:
                description: A symbol kind.
                enum:
                - 1
                - 2
                - 3
                - 4
                - 5
                - 6
                - 7
                - 8
                - 9
                - 10
                - 11
                - 12
                - 13
                - 14
                - 15
                - 16
                - 17
                - 18
                - 19
                - 20
                - 21
                - 22
                - 23
                - 24
                - 25
                - 26
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          title: symbolKind
          type: object
        tagSupport:
          defaultProperties: []
          description: |-
            The client supports tags on `SymbolInformation`.
            Clients supporting tags have to handle unknown tags gracefully.
          properties:
            valueSet:
              description: The tags supported by the client.
              items:
                enum:
                - 1
                type: number
              title: valueSet
              type: array
          x-propertyOrder:
          - valueSet
          required:
          - valueSet
          title: tagSupport
          type: object
      x-propertyOrder:
      - dynamicRegistration
      - symbolKind
      - tagSupport
      - resolveSupport
      title: WorkspaceSymbolClientCapabilities
      type: object
    WorkspaceSymbolOptions:
      defaultProperties: []
      description: Server capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
      properties:
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a workspace symbol.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - resolveProvider
      - workDoneProgress
      title: WorkspaceSymbolOptions
      type: object
    WorkspaceSymbolParams:
      defaultProperties: []
      description: The parameters of a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
      properties:
        partialResultToken:
          $ref: '#/components/schemas/ProgressToken'
          description: |-
            An optional token that a server can use to report partial results (e.g. streaming) to
            the client.
          title: partialResultToken
        query:
          description: |-
            A query string to filter symbols by. Clients may send an empty
            string here to request all symbols.
          title: query
          type: string
        workDoneToken:
          $ref: '#/components/schemas/ProgressToken'
          description: An optional token that a server can use to report work done progress.
          title: workDoneToken
      x-propertyOrder:
      - query
      - workDoneToken
      - partialResultToken
      required:
      - query
      title: WorkspaceSymbolParams
      type: object
    WorkspaceSymbolRegistrationOptions:
      defaultProperties: []
      description: Registration options for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).
      properties:
        resolveProvider:
          description: |-
            The server provides support to resolve additional
            information for a workspace symbol.
          title: resolveProvider
          type: boolean
        workDoneProgress:
          title: workDoneProgress
          type: boolean
      x-propertyOrder:
      - resolveProvider
      - workDoneProgress
      title: WorkspaceSymbolRegistrationOptions
      type: object
    integer:
      description: Defines an integer in the range of -2^31 to 2^31 - 1.
      title: integer
      type: integer
    uinteger:
      description: Defines an unsigned integer in the range of 0 to 2^31 - 1.
      title: uinteger
      type: integer
